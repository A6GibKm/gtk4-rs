// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use cairo;
use glib;
use glib::object::IsA;
use glib::translate::*;
use graphene;
use gsk_sys;
use std::fmt;
use std::ptr;
use RenderNodeType;

glib_wrapper! {
    pub struct RenderNode(Object<gsk_sys::GskRenderNode>);

    match fn {
        get_type => || gsk_sys::gsk_render_node_get_type(),
    }
}

impl RenderNode {
    //pub fn deserialize(bytes: &glib::Bytes, error_func: /*Unimplemented*/FnMut(/*Unimplemented*/Fundamental: Pointer, &glib::Error), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> Option<RenderNode> {
    //    unsafe { TODO: call gsk_sys:gsk_render_node_deserialize() }
    //}
}

pub const NONE_RENDER_NODE: Option<&RenderNode> = None;

pub trait RenderNodeExt: 'static {
    fn draw(&self, cr: &cairo::Context);

    fn get_bounds(&self) -> graphene::Rect;

    fn get_node_type(&self) -> RenderNodeType;

    fn serialize(&self) -> Option<glib::Bytes>;

    fn write_to_file(&self, filename: &str) -> Result<(), glib::Error>;
}

impl<O: IsA<RenderNode>> RenderNodeExt for O {
    fn draw(&self, cr: &cairo::Context) {
        unsafe {
            gsk_sys::gsk_render_node_draw(
                self.as_ref().to_glib_none().0,
                mut_override(cr.to_glib_none().0),
            );
        }
    }

    fn get_bounds(&self) -> graphene::Rect {
        unsafe {
            let mut bounds = graphene::Rect::uninitialized();
            gsk_sys::gsk_render_node_get_bounds(
                self.as_ref().to_glib_none().0,
                bounds.to_glib_none_mut().0,
            );
            bounds
        }
    }

    fn get_node_type(&self) -> RenderNodeType {
        unsafe {
            from_glib(gsk_sys::gsk_render_node_get_node_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn serialize(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_full(gsk_sys::gsk_render_node_serialize(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn write_to_file(&self, filename: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gsk_sys::gsk_render_node_write_to_file(
                self.as_ref().to_glib_none().0,
                filename.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl fmt::Display for RenderNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RenderNode")
    }
}
