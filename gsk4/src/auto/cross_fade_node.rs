// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gsk_sys;
use std::fmt;
use RenderNode;

glib_wrapper! {
    pub struct CrossFadeNode(Object<gsk_sys::GskCrossFadeNode, CrossFadeNodeClass>) @extends RenderNode;

    match fn {
        get_type => || gsk_sys::gsk_cross_fade_node_get_type(),
    }
}

impl CrossFadeNode {
    pub fn new<P: IsA<RenderNode>, Q: IsA<RenderNode>>(
        start: &P,
        end: &Q,
        progress: f32,
    ) -> CrossFadeNode {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(gsk_sys::gsk_cross_fade_node_new(
                start.as_ref().to_glib_none().0,
                end.as_ref().to_glib_none().0,
                progress,
            ))
        }
    }

    pub fn get_end_child(&self) -> Option<RenderNode> {
        unsafe {
            from_glib_none(gsk_sys::gsk_cross_fade_node_get_end_child(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_progress(&self) -> f32 {
        unsafe { gsk_sys::gsk_cross_fade_node_get_progress(self.to_glib_none().0) }
    }

    pub fn get_start_child(&self) -> Option<RenderNode> {
        unsafe {
            from_glib_none(gsk_sys::gsk_cross_fade_node_get_start_child(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for CrossFadeNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CrossFadeNode")
    }
}
