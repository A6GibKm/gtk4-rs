// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct MapListModel(Object<gtk_sys::GtkMapListModel, gtk_sys::GtkMapListModelClass>) @implements gio::ListModel;

    match fn {
        get_type => || gtk_sys::gtk_map_list_model_get_type(),
    }
}

impl MapListModel {
    pub fn new<P: IsA<gio::ListModel>>(
        model: Option<&P>,
        map_func: Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>,
    ) -> MapListModel {
        assert_initialized_main_thread!();
        let map_func_data: Box_<Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>> =
            Box_::new(map_func);
        unsafe extern "C" fn map_func_func<P: IsA<gio::ListModel>>(
            item: *mut gobject_sys::GObject,
            user_data: glib_sys::gpointer,
        ) -> *mut gobject_sys::GObject {
            let item = from_glib_full(item);
            let callback: &Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>> =
                &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&item)
            } else {
                panic!("cannot get closure...")
            };
            res.to_glib_full()
        }
        let map_func = if map_func_data.is_some() {
            Some(map_func_func::<P> as _)
        } else {
            None
        };
        unsafe extern "C" fn user_destroy_func<P: IsA<gio::ListModel>>(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(user_destroy_func::<P> as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>> =
            map_func_data;
        unsafe {
            from_glib_full(gtk_sys::gtk_map_list_model_new(
                model.map(|p| p.as_ref()).to_glib_full(),
                map_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            ))
        }
    }
}

#[derive(Clone, Default)]
pub struct MapListModelBuilder {
    model: Option<gio::ListModel>,
}

impl MapListModelBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> MapListModel {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref model) = self.model {
            properties.push(("model", model));
        }
        let ret = glib::Object::new(MapListModel::static_type(), &properties)
            .expect("object new")
            .downcast::<MapListModel>()
            .expect("downcast");
        ret
    }

    pub fn model<P: IsA<gio::ListModel>>(mut self, model: &P) -> Self {
        self.model = Some(model.clone().upcast());
        self
    }
}

pub const NONE_MAP_LIST_MODEL: Option<&MapListModel> = None;

pub trait MapListModelExt: 'static {
    fn get_model(&self) -> Option<gio::ListModel>;

    fn has_map(&self) -> bool;

    fn set_map_func(&self, map_func: Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>);

    fn set_model<P: IsA<gio::ListModel>>(&self, model: Option<&P>);

    fn get_property_has_map(&self) -> bool;

    fn connect_property_has_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MapListModel>> MapListModelExt for O {
    fn get_model(&self) -> Option<gio::ListModel> {
        unsafe {
            from_glib_none(gtk_sys::gtk_map_list_model_get_model(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn has_map(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_map_list_model_has_map(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_map_func(
        &self,
        map_func: Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>,
    ) {
        let map_func_data: Box_<Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>> =
            Box_::new(map_func);
        unsafe extern "C" fn map_func_func(
            item: *mut gobject_sys::GObject,
            user_data: glib_sys::gpointer,
        ) -> *mut gobject_sys::GObject {
            let item = from_glib_full(item);
            let callback: &Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>> =
                &*(user_data as *mut _);
            let res = if let Some(ref callback) = *callback {
                callback(&item)
            } else {
                panic!("cannot get closure...")
            };
            res.to_glib_full()
        }
        let map_func = if map_func_data.is_some() {
            Some(map_func_func as _)
        } else {
            None
        };
        unsafe extern "C" fn user_destroy_func(data: glib_sys::gpointer) {
            let _callback: Box_<Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>> =
                Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(user_destroy_func as _);
        let super_callback0: Box_<Option<Box_<dyn Fn(&glib::Object) -> glib::Object + 'static>>> =
            map_func_data;
        unsafe {
            gtk_sys::gtk_map_list_model_set_map_func(
                self.as_ref().to_glib_none().0,
                map_func,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    fn set_model<P: IsA<gio::ListModel>>(&self, model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_map_list_model_set_model(
                self.as_ref().to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn get_property_has_map(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"has-map\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `has-map` getter")
                .unwrap()
        }
    }

    fn connect_property_has_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_map_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkMapListModel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<MapListModel>,
        {
            let f: &F = &*(f as *const F);
            f(&MapListModel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-map\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_map_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for MapListModel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapListModel")
    }
}
