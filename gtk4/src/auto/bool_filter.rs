// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ffi;
use crate::Filter;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::glib_wrapper! {
    pub struct BoolFilter(Object<ffi::GtkBoolFilter, ffi::GtkBoolFilterClass>) @extends Filter;

    match fn {
        get_type => || ffi::gtk_bool_filter_get_type(),
    }
}

impl BoolFilter {
    //pub fn new(expression: /*Ignored*/Option<&Expression>) -> BoolFilter {
    //    unsafe { TODO: call ffi:gtk_bool_filter_new() }
    //}
}

#[derive(Clone, Default)]
pub struct BoolFilterBuilder {
    //expression: /*Unknown type*/,
    invert: Option<bool>,
}

impl BoolFilterBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> BoolFilter {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref invert) = self.invert {
            properties.push(("invert", invert));
        }
        let ret = glib::Object::new(BoolFilter::static_type(), &properties)
            .expect("object new")
            .downcast::<BoolFilter>()
            .expect("downcast");
        ret
    }

    pub fn invert(mut self, invert: bool) -> Self {
        self.invert = Some(invert);
        self
    }
}

pub const NONE_BOOL_FILTER: Option<&BoolFilter> = None;

pub trait BoolFilterExt: 'static {
    //fn get_expression(&self) -> /*Ignored*/Option<Expression>;

    fn get_invert(&self) -> bool;

    //fn set_expression(&self, expression: /*Ignored*/&Expression);

    fn set_invert(&self, invert: bool);

    fn connect_property_expression_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_invert_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<BoolFilter>> BoolFilterExt for O {
    //fn get_expression(&self) -> /*Ignored*/Option<Expression> {
    //    unsafe { TODO: call ffi:gtk_bool_filter_get_expression() }
    //}

    fn get_invert(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_bool_filter_get_invert(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn set_expression(&self, expression: /*Ignored*/&Expression) {
    //    unsafe { TODO: call ffi:gtk_bool_filter_set_expression() }
    //}

    fn set_invert(&self, invert: bool) {
        unsafe {
            ffi::gtk_bool_filter_set_invert(self.as_ref().to_glib_none().0, invert.to_glib());
        }
    }

    fn connect_property_expression_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_expression_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::GtkBoolFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<BoolFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&BoolFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::expression\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_expression_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_invert_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_invert_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::GtkBoolFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<BoolFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&BoolFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::invert\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_invert_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for BoolFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "BoolFilter")
    }
}
