// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use glib_sys;
use gsk;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use LayoutChild;
use LayoutManager;
use Widget;

glib_wrapper! {
    pub struct FixedLayoutChild(Object<gtk_sys::GtkFixedLayoutChild, gtk_sys::GtkFixedLayoutChildClass>) @extends LayoutChild;

    match fn {
        get_type => || gtk_sys::gtk_fixed_layout_child_get_type(),
    }
}

#[derive(Clone, Default)]
pub struct FixedLayoutChildBuilder {
    transform: Option<gsk::Transform>,
    child_widget: Option<Widget>,
    layout_manager: Option<LayoutManager>,
}

impl FixedLayoutChildBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> FixedLayoutChild {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref transform) = self.transform {
            properties.push(("transform", transform));
        }
        if let Some(ref child_widget) = self.child_widget {
            properties.push(("child-widget", child_widget));
        }
        if let Some(ref layout_manager) = self.layout_manager {
            properties.push(("layout-manager", layout_manager));
        }
        let ret = glib::Object::new(FixedLayoutChild::static_type(), &properties)
            .expect("object new")
            .downcast::<FixedLayoutChild>()
            .expect("downcast");
        ret
    }

    pub fn transform(mut self, transform: &gsk::Transform) -> Self {
        self.transform = Some(transform.clone());
        self
    }

    pub fn child_widget<P: IsA<Widget>>(mut self, child_widget: &P) -> Self {
        self.child_widget = Some(child_widget.clone().upcast());
        self
    }

    pub fn layout_manager<P: IsA<LayoutManager>>(mut self, layout_manager: &P) -> Self {
        self.layout_manager = Some(layout_manager.clone().upcast());
        self
    }
}

pub const NONE_FIXED_LAYOUT_CHILD: Option<&FixedLayoutChild> = None;

pub trait FixedLayoutChildExt: 'static {
    fn get_transform(&self) -> Option<gsk::Transform>;

    fn set_transform(&self, transform: &gsk::Transform);

    fn connect_property_transform_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FixedLayoutChild>> FixedLayoutChildExt for O {
    fn get_transform(&self) -> Option<gsk::Transform> {
        unsafe {
            from_glib_none(gtk_sys::gtk_fixed_layout_child_get_transform(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_transform(&self, transform: &gsk::Transform) {
        unsafe {
            gtk_sys::gtk_fixed_layout_child_set_transform(
                self.as_ref().to_glib_none().0,
                transform.to_glib_none().0,
            );
        }
    }

    fn connect_property_transform_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transform_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkFixedLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<FixedLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&FixedLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::transform\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_transform_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FixedLayoutChild {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FixedLayoutChild")
    }
}
