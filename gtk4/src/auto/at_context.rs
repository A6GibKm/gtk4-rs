// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Accessible;
use AccessibleRole;

glib_wrapper! {
    pub struct ATContext(Object<gtk_sys::GtkATContext, gtk_sys::GtkATContextClass, ATContextClass>);

    match fn {
        get_type => || gtk_sys::gtk_at_context_get_type(),
    }
}

impl ATContext {
    pub fn create<P: IsA<Accessible>>(
        accessible_role: AccessibleRole,
        accessible: &P,
    ) -> Option<ATContext> {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(gtk_sys::gtk_at_context_create(
                accessible_role.to_glib(),
                accessible.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn get_accessible(&self) -> Option<Accessible> {
        unsafe {
            from_glib_none(gtk_sys::gtk_at_context_get_accessible(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_accessible_role(&self) -> AccessibleRole {
        unsafe {
            from_glib(gtk_sys::gtk_at_context_get_accessible_role(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn connect_state_change<F: Fn(&ATContext) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn state_change_trampoline<F: Fn(&ATContext) + 'static>(
            this: *mut gtk_sys::GtkATContext,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"state-change\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    state_change_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ATContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ATContext")
    }
}
