// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use gtk_sys;
use std::fmt;
use Buildable;

glib_wrapper! {
    pub struct StringList(Object<gtk_sys::GtkStringList, gtk_sys::GtkStringListClass>) @implements gio::ListModel, Buildable;

    match fn {
        get_type => || gtk_sys::gtk_string_list_get_type(),
    }
}

impl StringList {
    pub fn new(strings: &[&str]) -> StringList {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(gtk_sys::gtk_string_list_new(strings.to_glib_none().0)) }
    }
}

pub const NONE_STRING_LIST: Option<&StringList> = None;

pub trait StringListExt: 'static {
    fn append(&self, string: &str);

    fn get_string(&self, position: u32) -> Option<GString>;

    fn remove(&self, position: u32);

    fn splice(&self, position: u32, n_removals: u32, additions: &[&str]);

    fn take(&self, string: &str);
}

impl<O: IsA<StringList>> StringListExt for O {
    fn append(&self, string: &str) {
        unsafe {
            gtk_sys::gtk_string_list_append(
                self.as_ref().to_glib_none().0,
                string.to_glib_none().0,
            );
        }
    }

    fn get_string(&self, position: u32) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_string_list_get_string(
                self.as_ref().to_glib_none().0,
                position,
            ))
        }
    }

    fn remove(&self, position: u32) {
        unsafe {
            gtk_sys::gtk_string_list_remove(self.as_ref().to_glib_none().0, position);
        }
    }

    fn splice(&self, position: u32, n_removals: u32, additions: &[&str]) {
        unsafe {
            gtk_sys::gtk_string_list_splice(
                self.as_ref().to_glib_none().0,
                position,
                n_removals,
                additions.to_glib_none().0,
            );
        }
    }

    fn take(&self, string: &str) {
        unsafe {
            gtk_sys::gtk_string_list_take(self.as_ref().to_glib_none().0, string.to_glib_full());
        }
    }
}

impl fmt::Display for StringList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StringList")
    }
}
