// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct CellAccessibleParent(Interface<gtk_sys::GtkCellAccessibleParent>);

    match fn {
        get_type => || gtk_sys::gtk_cell_accessible_parent_get_type(),
    }
}

pub const NONE_CELL_ACCESSIBLE_PARENT: Option<&CellAccessibleParent> = None;

pub trait CellAccessibleParentExt: 'static {
    //fn activate(&self, cell: /*Ignored*/&CellAccessible);

    //fn edit(&self, cell: /*Ignored*/&CellAccessible);

    //fn expand_collapse(&self, cell: /*Ignored*/&CellAccessible);

    //fn get_cell_area(&self, cell: /*Ignored*/&CellAccessible) -> gdk::Rectangle;

    //fn get_cell_extents(&self, cell: /*Ignored*/&CellAccessible, coord_type: atk::CoordType) -> (i32, i32, i32, i32);

    //fn get_child_index(&self, cell: /*Ignored*/&CellAccessible) -> i32;

    //fn get_column_header_cells(&self, cell: /*Ignored*/&CellAccessible) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 4, id: 9 };

    //fn get_renderer_state(&self, cell: /*Ignored*/&CellAccessible) -> CellRendererState;

    //fn get_row_header_cells(&self, cell: /*Ignored*/&CellAccessible) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 4, id: 9 };

    //fn grab_focus(&self, cell: /*Ignored*/&CellAccessible) -> bool;

    //fn update_relationset<P: IsA<atk::RelationSet>>(&self, cell: /*Ignored*/&CellAccessible, relationset: &P);
}

impl<O: IsA<CellAccessibleParent>> CellAccessibleParentExt for O {
    //fn activate(&self, cell: /*Ignored*/&CellAccessible) {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_activate() }
    //}

    //fn edit(&self, cell: /*Ignored*/&CellAccessible) {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_edit() }
    //}

    //fn expand_collapse(&self, cell: /*Ignored*/&CellAccessible) {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_expand_collapse() }
    //}

    //fn get_cell_area(&self, cell: /*Ignored*/&CellAccessible) -> gdk::Rectangle {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_get_cell_area() }
    //}

    //fn get_cell_extents(&self, cell: /*Ignored*/&CellAccessible, coord_type: atk::CoordType) -> (i32, i32, i32, i32) {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_get_cell_extents() }
    //}

    //fn get_child_index(&self, cell: /*Ignored*/&CellAccessible) -> i32 {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_get_child_index() }
    //}

    //fn get_column_header_cells(&self, cell: /*Ignored*/&CellAccessible) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 4, id: 9 } {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_get_column_header_cells() }
    //}

    //fn get_renderer_state(&self, cell: /*Ignored*/&CellAccessible) -> CellRendererState {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_get_renderer_state() }
    //}

    //fn get_row_header_cells(&self, cell: /*Ignored*/&CellAccessible) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 4, id: 9 } {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_get_row_header_cells() }
    //}

    //fn grab_focus(&self, cell: /*Ignored*/&CellAccessible) -> bool {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_grab_focus() }
    //}

    //fn update_relationset<P: IsA<atk::RelationSet>>(&self, cell: /*Ignored*/&CellAccessible, relationset: &P) {
    //    unsafe { TODO: call gtk_sys:gtk_cell_accessible_parent_update_relationset() }
    //}
}

impl fmt::Display for CellAccessibleParent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CellAccessibleParent")
    }
}
