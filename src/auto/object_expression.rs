// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use Expression;

glib_wrapper! {
    pub struct ObjectExpression(Object<gtk_sys::GtkObjectExpression, ObjectExpressionClass>) @extends Expression;

    match fn {
        get_type => || gtk_sys::gtk_object_expression_get_type(),
    }
}

impl ObjectExpression {
    pub fn new<P: IsA<glib::Object>>(object: &P) -> ObjectExpression {
        assert_initialized_main_thread!();
        unsafe {
            Expression::from_glib_full(gtk_sys::gtk_object_expression_new(
                object.as_ref().to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_object(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_none(gtk_sys::gtk_object_expression_get_object(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for ObjectExpression {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ObjectExpression")
    }
}
