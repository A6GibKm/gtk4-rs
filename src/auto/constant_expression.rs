// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use Expression;

glib_wrapper! {
    pub struct ConstantExpression(Object<gtk_sys::GtkConstantExpression, ConstantExpressionClass>) @extends Expression;

    match fn {
        get_type => || gtk_sys::gtk_constant_expression_get_type(),
    }
}

impl ConstantExpression {
    //pub fn new(value_type: glib::types::Type, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> ConstantExpression {
    //    unsafe { TODO: call gtk_sys:gtk_constant_expression_new() }
    //}

    pub fn new_for_value(value: &glib::Value) -> ConstantExpression {
        assert_initialized_main_thread!();
        unsafe {
            Expression::from_glib_full(gtk_sys::gtk_constant_expression_new_for_value(
                value.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn get_value(&self) -> Option<glib::Value> {
        unsafe {
            from_glib_none(gtk_sys::gtk_constant_expression_get_value(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for ConstantExpression {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ConstantExpression")
    }
}
