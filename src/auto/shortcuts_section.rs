// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Box;
use Buildable;
use Container;
use Orientable;
use Widget;
use ffi;
use glib;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ShortcutsSection(Object<ffi::GtkShortcutsSection, ffi::GtkShortcutsSectionClass, ShortcutsSectionClass>) @extends Box, Container, Widget, @implements Buildable, Orientable;

    match fn {
        get_type => || ffi::gtk_shortcuts_section_get_type(),
    }
}

pub const NONE_SHORTCUTS_SECTION: Option<&ShortcutsSection> = None;

pub trait ShortcutsSectionExt: 'static {
    fn get_property_max_height(&self) -> u32;

    fn set_property_max_height(&self, max_height: u32);

    fn get_property_section_name(&self) -> Option<GString>;

    fn set_property_section_name(&self, section_name: Option<&str>);

    fn get_property_title(&self) -> Option<GString>;

    fn set_property_title(&self, title: Option<&str>);

    fn get_property_view_name(&self) -> Option<GString>;

    fn set_property_view_name(&self, view_name: Option<&str>);

    fn connect_change_current_page<F: Fn(&Self, i32) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_change_current_page(&self, object: i32) -> bool;

    fn connect_property_max_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_section_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_view_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ShortcutsSection>> ShortcutsSectionExt for O {
    fn get_property_max_height(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"max-height\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_max_height(&self, max_height: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"max-height\0".as_ptr() as *const _, Value::from(&max_height).to_glib_none().0);
        }
    }

    fn get_property_section_name(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"section-name\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_section_name(&self, section_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"section-name\0".as_ptr() as *const _, Value::from(section_name).to_glib_none().0);
        }
    }

    fn get_property_title(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"title\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_title(&self, title: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"title\0".as_ptr() as *const _, Value::from(title).to_glib_none().0);
        }
    }

    fn get_property_view_name(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"view-name\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_view_name(&self, view_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"view-name\0".as_ptr() as *const _, Value::from(view_name).to_glib_none().0);
        }
    }

    fn connect_change_current_page<F: Fn(&Self, i32) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"change-current-page\0".as_ptr() as *const _,
                Some(transmute(change_current_page_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_change_current_page(&self, object: i32) -> bool {
        let res = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_ffi::GObject).emit("change-current-page", &[&object]).unwrap() };
        res.unwrap().get().unwrap()
    }

    fn connect_property_max_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::max-height\0".as_ptr() as *const _,
                Some(transmute(notify_max_height_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_section_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::section-name\0".as_ptr() as *const _,
                Some(transmute(notify_section_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute(notify_title_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_view_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::view-name\0".as_ptr() as *const _,
                Some(transmute(notify_view_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn change_current_page_trampoline<P, F: Fn(&P, i32) -> bool + 'static>(this: *mut ffi::GtkShortcutsSection, object: libc::c_int, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<ShortcutsSection> {
    let f: &F = &*(f as *const F);
    f(&ShortcutsSection::from_glib_borrow(this).unsafe_cast(), object).to_glib()
}

unsafe extern "C" fn notify_max_height_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkShortcutsSection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ShortcutsSection> {
    let f: &F = &*(f as *const F);
    f(&ShortcutsSection::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_section_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkShortcutsSection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ShortcutsSection> {
    let f: &F = &*(f as *const F);
    f(&ShortcutsSection::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkShortcutsSection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ShortcutsSection> {
    let f: &F = &*(f as *const F);
    f(&ShortcutsSection::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_view_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkShortcutsSection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ShortcutsSection> {
    let f: &F = &*(f as *const F);
    f(&ShortcutsSection::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for ShortcutsSection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ShortcutsSection")
    }
}
