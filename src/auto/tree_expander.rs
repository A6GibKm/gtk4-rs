// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Accessible;
use Buildable;
use ConstraintTarget;
use TreeListRow;
use Widget;

glib_wrapper! {
    pub struct TreeExpander(Object<gtk_sys::GtkTreeExpander, gtk_sys::GtkTreeExpanderClass, TreeExpanderClass>) @extends Widget, @implements Accessible, Buildable, ConstraintTarget;

    match fn {
        get_type => || gtk_sys::gtk_tree_expander_get_type(),
    }
}

impl TreeExpander {
    pub fn new() -> TreeExpander {
        assert_initialized_main_thread!();
        unsafe { Widget::from_glib_none(gtk_sys::gtk_tree_expander_new()).unsafe_cast() }
    }
}

impl Default for TreeExpander {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_TREE_EXPANDER: Option<&TreeExpander> = None;

pub trait TreeExpanderExt: 'static {
    fn get_child(&self) -> Option<Widget>;

    //fn get_item(&self) -> /*Unimplemented*/Option<Fundamental: Pointer>;

    fn get_list_row(&self) -> Option<TreeListRow>;

    fn set_child<P: IsA<Widget>>(&self, child: Option<&P>);

    fn set_list_row<P: IsA<TreeListRow>>(&self, list_row: Option<&P>);

    fn connect_property_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_item_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_list_row_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<TreeExpander>> TreeExpanderExt for O {
    fn get_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_tree_expander_get_child(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn get_item(&self) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call gtk_sys:gtk_tree_expander_get_item() }
    //}

    fn get_list_row(&self) -> Option<TreeListRow> {
        unsafe {
            from_glib_none(gtk_sys::gtk_tree_expander_get_list_row(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_child<P: IsA<Widget>>(&self, child: Option<&P>) {
        unsafe {
            gtk_sys::gtk_tree_expander_set_child(
                self.as_ref().to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn set_list_row<P: IsA<TreeListRow>>(&self, list_row: Option<&P>) {
        unsafe {
            gtk_sys::gtk_tree_expander_set_list_row(
                self.as_ref().to_glib_none().0,
                list_row.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn connect_property_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkTreeExpander,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<TreeExpander>,
        {
            let f: &F = &*(f as *const F);
            f(&TreeExpander::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_item_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_item_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkTreeExpander,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<TreeExpander>,
        {
            let f: &F = &*(f as *const F);
            f(&TreeExpander::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::item\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_item_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_list_row_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_list_row_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkTreeExpander,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<TreeExpander>,
        {
            let f: &F = &*(f as *const F);
            f(&TreeExpander::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::list-row\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_list_row_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for TreeExpander {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TreeExpander")
    }
}
