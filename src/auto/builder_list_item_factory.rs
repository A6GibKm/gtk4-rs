// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use gtk_sys;
use std::fmt;
use BuilderScope;
use ListItemFactory;

glib_wrapper! {
    pub struct BuilderListItemFactory(Object<gtk_sys::GtkBuilderListItemFactory, gtk_sys::GtkBuilderListItemFactoryClass, BuilderListItemFactoryClass>) @extends ListItemFactory;

    match fn {
        get_type => || gtk_sys::gtk_builder_list_item_factory_get_type(),
    }
}

impl BuilderListItemFactory {
    pub fn from_bytes<P: IsA<BuilderScope>>(
        scope: Option<&P>,
        bytes: &glib::Bytes,
    ) -> BuilderListItemFactory {
        assert_initialized_main_thread!();
        unsafe {
            ListItemFactory::from_glib_full(gtk_sys::gtk_builder_list_item_factory_new_from_bytes(
                scope.map(|p| p.as_ref()).to_glib_none().0,
                bytes.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    pub fn from_resource<P: IsA<BuilderScope>>(
        scope: Option<&P>,
        resource_path: &str,
    ) -> BuilderListItemFactory {
        assert_initialized_main_thread!();
        unsafe {
            ListItemFactory::from_glib_full(
                gtk_sys::gtk_builder_list_item_factory_new_from_resource(
                    scope.map(|p| p.as_ref()).to_glib_none().0,
                    resource_path.to_glib_none().0,
                ),
            )
            .unsafe_cast()
        }
    }

    pub fn get_bytes(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(gtk_sys::gtk_builder_list_item_factory_get_bytes(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_resource(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_builder_list_item_factory_get_resource(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_scope(&self) -> Option<BuilderScope> {
        unsafe {
            from_glib_none(gtk_sys::gtk_builder_list_item_factory_get_scope(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for BuilderListItemFactory {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "BuilderListItemFactory")
    }
}
