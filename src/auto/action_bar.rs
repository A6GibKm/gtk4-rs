// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Buildable;
use Container;
use Widget;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ActionBar(Object<gtk_sys::GtkActionBar, gtk_sys::GtkActionBarClass, ActionBarClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_action_bar_get_type(),
    }
}

impl ActionBar {
    pub fn new() -> ActionBar {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_action_bar_new()).unsafe_cast()
        }
    }
}

impl Default for ActionBar {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_ACTION_BAR: Option<&ActionBar> = None;

pub trait ActionBarExt: 'static {
    fn get_center_widget(&self) -> Option<Widget>;

    fn get_revealed(&self) -> bool;

    fn pack_end<P: IsA<Widget>>(&self, child: &P);

    fn pack_start<P: IsA<Widget>>(&self, child: &P);

    fn set_center_widget<P: IsA<Widget>>(&self, center_widget: Option<&P>);

    fn set_revealed(&self, revealed: bool);

    fn connect_property_revealed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ActionBar>> ActionBarExt for O {
    fn get_center_widget(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_action_bar_get_center_widget(self.as_ref().to_glib_none().0))
        }
    }

    fn get_revealed(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_action_bar_get_revealed(self.as_ref().to_glib_none().0))
        }
    }

    fn pack_end<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_action_bar_pack_end(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    fn pack_start<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_action_bar_pack_start(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    fn set_center_widget<P: IsA<Widget>>(&self, center_widget: Option<&P>) {
        unsafe {
            gtk_sys::gtk_action_bar_set_center_widget(self.as_ref().to_glib_none().0, center_widget.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    fn set_revealed(&self, revealed: bool) {
        unsafe {
            gtk_sys::gtk_action_bar_set_revealed(self.as_ref().to_glib_none().0, revealed.to_glib());
        }
    }

    fn connect_property_revealed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::revealed\0".as_ptr() as *const _,
                Some(transmute(notify_revealed_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_revealed_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkActionBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<ActionBar> {
    let f: &F = &*(f as *const F);
    f(&ActionBar::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for ActionBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ActionBar")
    }
}
