// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Atom;
use AxisFlags;
use AxisUse;
use DeviceTool;
use DeviceType;
use Display;
use InputMode;
use InputSource;
use ModifierType;
use Seat;
use Surface;
use ffi;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::ObjectType;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib_wrapper! {
    pub struct Device(Object<ffi::GdkDevice, DeviceClass>);

    match fn {
        get_type => || ffi::gdk_device_get_type(),
    }
}

impl Device {
    pub fn get_associated_device(&self) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_associated_device(self.to_glib_none().0))
        }
    }

    pub fn get_axes(&self) -> AxisFlags {
        unsafe {
            from_glib(ffi::gdk_device_get_axes(self.to_glib_none().0))
        }
    }

    //pub fn get_axis(&self, axes: &[f64], use_: AxisUse) -> Option<f64> {
    //    unsafe { TODO: call ffi::gdk_device_get_axis() }
    //}

    pub fn get_axis_use(&self, index_: u32) -> AxisUse {
        unsafe {
            from_glib(ffi::gdk_device_get_axis_use(self.to_glib_none().0, index_))
        }
    }

    //pub fn get_axis_value(&self, axes: &[f64], axis_label: &Atom) -> Option<f64> {
    //    unsafe { TODO: call ffi::gdk_device_get_axis_value() }
    //}

    pub fn get_device_type(&self) -> DeviceType {
        unsafe {
            from_glib(ffi::gdk_device_get_device_type(self.to_glib_none().0))
        }
    }

    pub fn get_display(&self) -> Option<Display> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_display(self.to_glib_none().0))
        }
    }

    pub fn get_has_cursor(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_device_get_has_cursor(self.to_glib_none().0))
        }
    }

    pub fn get_key(&self, index_: u32) -> Option<(u32, ModifierType)> {
        unsafe {
            let mut keyval = mem::uninitialized();
            let mut modifiers = mem::uninitialized();
            let ret = from_glib(ffi::gdk_device_get_key(self.to_glib_none().0, index_, &mut keyval, &mut modifiers));
            if ret { Some((keyval, from_glib(modifiers))) } else { None }
        }
    }

    pub fn get_last_event_surface(&self) -> Option<Surface> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_last_event_surface(self.to_glib_none().0))
        }
    }

    pub fn get_mode(&self) -> InputMode {
        unsafe {
            from_glib(ffi::gdk_device_get_mode(self.to_glib_none().0))
        }
    }

    pub fn get_n_axes(&self) -> i32 {
        unsafe {
            ffi::gdk_device_get_n_axes(self.to_glib_none().0)
        }
    }

    pub fn get_n_keys(&self) -> i32 {
        unsafe {
            ffi::gdk_device_get_n_keys(self.to_glib_none().0)
        }
    }

    pub fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_name(self.to_glib_none().0))
        }
    }

    pub fn get_position(&self) -> (f64, f64) {
        unsafe {
            let mut x = mem::uninitialized();
            let mut y = mem::uninitialized();
            ffi::gdk_device_get_position(self.to_glib_none().0, &mut x, &mut y);
            (x, y)
        }
    }

    pub fn get_product_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_product_id(self.to_glib_none().0))
        }
    }

    pub fn get_seat(&self) -> Option<Seat> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_seat(self.to_glib_none().0))
        }
    }

    pub fn get_source(&self) -> InputSource {
        unsafe {
            from_glib(ffi::gdk_device_get_source(self.to_glib_none().0))
        }
    }

    //pub fn get_state<P: IsA<Surface>>(&self, surface: &P, axes: &[f64]) -> ModifierType {
    //    unsafe { TODO: call ffi::gdk_device_get_state() }
    //}

    pub fn get_surface_at_position(&self) -> (Option<Surface>, f64, f64) {
        unsafe {
            let mut win_x = mem::uninitialized();
            let mut win_y = mem::uninitialized();
            let ret = from_glib_none(ffi::gdk_device_get_surface_at_position(self.to_glib_none().0, &mut win_x, &mut win_y));
            (ret, win_x, win_y)
        }
    }

    pub fn get_vendor_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gdk_device_get_vendor_id(self.to_glib_none().0))
        }
    }

    pub fn list_axes(&self) -> Vec<Atom> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gdk_device_list_axes(self.to_glib_none().0))
        }
    }

    pub fn list_slave_devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gdk_device_list_slave_devices(self.to_glib_none().0))
        }
    }

    pub fn set_axis_use(&self, index_: u32, use_: AxisUse) {
        unsafe {
            ffi::gdk_device_set_axis_use(self.to_glib_none().0, index_, use_.to_glib());
        }
    }

    pub fn set_key(&self, index_: u32, keyval: u32, modifiers: ModifierType) {
        unsafe {
            ffi::gdk_device_set_key(self.to_glib_none().0, index_, keyval, modifiers.to_glib());
        }
    }

    pub fn set_mode(&self, mode: InputMode) -> bool {
        unsafe {
            from_glib(ffi::gdk_device_set_mode(self.to_glib_none().0, mode.to_glib()))
        }
    }

    pub fn get_property_input_mode(&self) -> InputMode {
        unsafe {
            let mut value = Value::from_type(<InputMode as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"input-mode\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn set_property_input_mode(&self, input_mode: InputMode) {
        unsafe {
            gobject_ffi::g_object_set_property(self.as_ptr() as *mut gobject_ffi::GObject, b"input-mode\0".as_ptr() as *const _, Value::from(&input_mode).to_glib_none().0);
        }
    }

    pub fn get_property_input_source(&self) -> InputSource {
        unsafe {
            let mut value = Value::from_type(<InputSource as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"input-source\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn get_property_num_touches(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"num-touches\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn set_property_seat(&self, seat: Option<&Seat>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.as_ptr() as *mut gobject_ffi::GObject, b"seat\0".as_ptr() as *const _, Value::from(seat).to_glib_none().0);
        }
    }

    pub fn get_property_tool(&self) -> Option<DeviceTool> {
        unsafe {
            let mut value = Value::from_type(<DeviceTool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"tool\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    pub fn get_property_type(&self) -> DeviceType {
        unsafe {
            let mut value = Value::from_type(<DeviceType as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"type\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn connect_changed<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute(changed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_tool_changed<F: Fn(&Device, &DeviceTool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"tool-changed\0".as_ptr() as *const _,
                Some(transmute(tool_changed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_associated_device_notify<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::associated-device\0".as_ptr() as *const _,
                Some(transmute(notify_associated_device_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_axes_notify<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::axes\0".as_ptr() as *const _,
                Some(transmute(notify_axes_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_input_mode_notify<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::input-mode\0".as_ptr() as *const _,
                Some(transmute(notify_input_mode_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_n_axes_notify<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::n-axes\0".as_ptr() as *const _,
                Some(transmute(notify_n_axes_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_seat_notify<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::seat\0".as_ptr() as *const _,
                Some(transmute(notify_seat_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_tool_notify<F: Fn(&Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tool\0".as_ptr() as *const _,
                Some(transmute(notify_tool_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn changed_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn tool_changed_trampoline<F: Fn(&Device, &DeviceTool) + 'static>(this: *mut ffi::GdkDevice, tool: *mut ffi::GdkDeviceTool, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), &from_glib_borrow(tool))
}

unsafe extern "C" fn notify_associated_device_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_axes_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_input_mode_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_n_axes_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_seat_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_tool_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::GdkDevice, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

impl fmt::Display for Device {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Device")
    }
}
