// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use gtk_sys;
use std::fmt;
use Expression;

glib_wrapper! {
    pub struct CClosureExpression(Object<gtk_sys::GtkCClosureExpression, CClosureExpressionClass>) @extends Expression;

    match fn {
        get_type => || gtk_sys::gtk_cclosure_expression_get_type(),
    }
}

impl CClosureExpression {
    //pub fn new<P: Fn() + 'static>(value_type: glib::types::Type, marshal: /*Unimplemented*/FnMut(&glib::Closure, Option<&glib::Value>, u32, &Vec<glib::Value>, /*Unimplemented*/Option<Fundamental: Pointer>, /*Unimplemented*/Option<Fundamental: Pointer>), params: &[Expression], callback_func: P, user_data: /*Unimplemented*/Option<Fundamental: Pointer>, user_destroy: /*Unimplemented*/Fn(/*Unimplemented*/Option<Fundamental: Pointer>, &glib::Closure)) -> CClosureExpression {
    //    unsafe { TODO: call gtk_sys:gtk_cclosure_expression_new() }
    //}
}

impl fmt::Display for CClosureExpression {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CClosureExpression")
    }
}
