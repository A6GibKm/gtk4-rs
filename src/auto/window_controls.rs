// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Accessible;
use Buildable;
use PackType;
use Widget;

glib_wrapper! {
    pub struct WindowControls(Object<gtk_sys::GtkWindowControls, gtk_sys::GtkWindowControlsClass, WindowControlsClass>) @extends Widget, @implements Accessible, Buildable;

    match fn {
        get_type => || gtk_sys::gtk_window_controls_get_type(),
    }
}

impl WindowControls {
    pub fn new(side: PackType) -> WindowControls {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_window_controls_new(side.to_glib())).unsafe_cast()
        }
    }
}

pub const NONE_WINDOW_CONTROLS: Option<&WindowControls> = None;

pub trait WindowControlsExt: 'static {
    fn get_decoration_layout(&self) -> Option<GString>;

    fn get_empty(&self) -> bool;

    fn get_side(&self) -> PackType;

    fn set_decoration_layout(&self, layout: Option<&str>);

    fn set_side(&self, side: PackType);

    fn connect_property_decoration_layout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_empty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_side_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WindowControls>> WindowControlsExt for O {
    fn get_decoration_layout(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_window_controls_get_decoration_layout(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_empty(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_window_controls_get_empty(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_side(&self) -> PackType {
        unsafe {
            from_glib(gtk_sys::gtk_window_controls_get_side(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_decoration_layout(&self, layout: Option<&str>) {
        unsafe {
            gtk_sys::gtk_window_controls_set_decoration_layout(
                self.as_ref().to_glib_none().0,
                layout.to_glib_none().0,
            );
        }
    }

    fn set_side(&self, side: PackType) {
        unsafe {
            gtk_sys::gtk_window_controls_set_side(self.as_ref().to_glib_none().0, side.to_glib());
        }
    }

    fn connect_property_decoration_layout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_decoration_layout_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWindowControls,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<WindowControls>,
        {
            let f: &F = &*(f as *const F);
            f(&WindowControls::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::decoration-layout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_decoration_layout_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_empty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_empty_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWindowControls,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<WindowControls>,
        {
            let f: &F = &*(f as *const F);
            f(&WindowControls::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::empty\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_empty_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_side_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_side_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkWindowControls,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<WindowControls>,
        {
            let f: &F = &*(f as *const F);
            f(&WindowControls::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::side\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_side_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for WindowControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WindowControls")
    }
}
