// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct AlternativeTrigger(Object<gtk_sys::GtkAlternativeTrigger, gtk_sys::GtkAlternativeTriggerClass, AlternativeTriggerClass>);

    match fn {
        get_type => || gtk_sys::gtk_alternative_trigger_get_type(),
    }
}

impl AlternativeTrigger {
    //pub fn new(first: /*Ignored*/&ShortcutTrigger, second: /*Ignored*/&ShortcutTrigger) -> AlternativeTrigger {
    //    unsafe { TODO: call gtk_sys:gtk_alternative_trigger_new() }
    //}

    //pub fn get_first(&self) -> /*Ignored*/Option<ShortcutTrigger> {
    //    unsafe { TODO: call gtk_sys:gtk_alternative_trigger_get_first() }
    //}

    //pub fn get_second(&self) -> /*Ignored*/Option<ShortcutTrigger> {
    //    unsafe { TODO: call gtk_sys:gtk_alternative_trigger_get_second() }
    //}
}

#[derive(Clone, Default)]
pub struct AlternativeTriggerBuilder {
    //first: /*Unknown type*/,
//second: /*Unknown type*/,
}

impl AlternativeTriggerBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> AlternativeTrigger {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        let ret = glib::Object::new(AlternativeTrigger::static_type(), &properties)
            .expect("object new")
            .downcast::<AlternativeTrigger>()
            .expect("downcast");
        ret
    }
}

impl fmt::Display for AlternativeTrigger {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AlternativeTrigger")
    }
}
