// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use ShortcutTrigger;

glib_wrapper! {
    pub struct AlternativeTrigger(Object<gtk_sys::GtkAlternativeTrigger, gtk_sys::GtkAlternativeTriggerClass, AlternativeTriggerClass>) @extends ShortcutTrigger;

    match fn {
        get_type => || gtk_sys::gtk_alternative_trigger_get_type(),
    }
}

impl AlternativeTrigger {
    pub fn new<P: IsA<ShortcutTrigger>, Q: IsA<ShortcutTrigger>>(
        first: &P,
        second: &Q,
    ) -> AlternativeTrigger {
        skip_assert_initialized!();
        unsafe {
            ShortcutTrigger::from_glib_full(gtk_sys::gtk_alternative_trigger_new(
                first.as_ref().to_glib_full(),
                second.as_ref().to_glib_full(),
            ))
            .unsafe_cast()
        }
    }

    pub fn get_first(&self) -> Option<ShortcutTrigger> {
        unsafe {
            from_glib_none(gtk_sys::gtk_alternative_trigger_get_first(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_second(&self) -> Option<ShortcutTrigger> {
        unsafe {
            from_glib_none(gtk_sys::gtk_alternative_trigger_get_second(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for AlternativeTrigger {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AlternativeTrigger")
    }
}
