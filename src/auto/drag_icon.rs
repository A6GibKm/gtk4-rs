// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Accessible;
use Buildable;
use ConstraintTarget;
use Root;
use Widget;

glib_wrapper! {
    pub struct DragIcon(Object<gtk_sys::GtkDragIcon, gtk_sys::GtkDragIconClass, DragIconClass>) @extends Widget, @implements Accessible, Buildable, ConstraintTarget, Root;

    match fn {
        get_type => || gtk_sys::gtk_drag_icon_get_type(),
    }
}

impl DragIcon {
    pub fn create_widget_for_value(value: &glib::Value) -> Option<Widget> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_drag_icon_create_widget_for_value(
                value.to_glib_none().0,
            ))
        }
    }

    pub fn get_for_drag(drag: &gdk::Drag) -> Option<Widget> {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(gtk_sys::gtk_drag_icon_get_for_drag(drag.to_glib_none().0)) }
    }

    pub fn set_from_paintable<P: IsA<gdk::Paintable>>(
        drag: &gdk::Drag,
        paintable: &P,
        hot_x: i32,
        hot_y: i32,
    ) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_drag_icon_set_from_paintable(
                drag.to_glib_none().0,
                paintable.as_ref().to_glib_none().0,
                hot_x,
                hot_y,
            );
        }
    }
}

pub const NONE_DRAG_ICON: Option<&DragIcon> = None;

pub trait DragIconExt: 'static {
    fn get_child(&self) -> Option<Widget>;

    fn set_child<P: IsA<Widget>>(&self, child: Option<&P>);

    fn connect_property_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DragIcon>> DragIconExt for O {
    fn get_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_drag_icon_get_child(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_child<P: IsA<Widget>>(&self, child: Option<&P>) {
        unsafe {
            gtk_sys::gtk_drag_icon_set_child(
                self.as_ref().to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn connect_property_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkDragIcon,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<DragIcon>,
        {
            let f: &F = &*(f as *const F);
            f(&DragIcon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DragIcon {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DragIcon")
    }
}
