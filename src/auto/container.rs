// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Adjustment;
use Buildable;
use Widget;
use WidgetPath;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Container(Object<gtk_sys::GtkContainer, gtk_sys::GtkContainerClass, ContainerClass>) @extends Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_container_get_type(),
    }
}

pub const NONE_CONTAINER: Option<&Container> = None;

pub trait ContainerExt: 'static {
    fn add<P: IsA<Widget>>(&self, widget: &P);

    fn child_type(&self) -> glib::types::Type;

    fn forall<P: FnMut(&Widget)>(&self, callback: P);

    fn foreach<P: FnMut(&Widget)>(&self, callback: P);

    fn get_children(&self) -> Vec<Widget>;

    fn get_focus_hadjustment(&self) -> Option<Adjustment>;

    fn get_focus_vadjustment(&self) -> Option<Adjustment>;

    fn get_path_for_child<P: IsA<Widget>>(&self, child: &P) -> Option<WidgetPath>;

    fn remove<P: IsA<Widget>>(&self, widget: &P);

    fn set_focus_hadjustment<P: IsA<Adjustment>>(&self, adjustment: &P);

    fn set_focus_vadjustment<P: IsA<Adjustment>>(&self, adjustment: &P);

    fn connect_add<F: Fn(&Self, &Widget) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_remove<F: Fn(&Self, &Widget) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Container>> ContainerExt for O {
    fn add<P: IsA<Widget>>(&self, widget: &P) {
        unsafe {
            gtk_sys::gtk_container_add(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    fn child_type(&self) -> glib::types::Type {
        unsafe {
            from_glib(gtk_sys::gtk_container_child_type(self.as_ref().to_glib_none().0))
        }
    }

    fn forall<P: FnMut(&Widget)>(&self, callback: P) {
        let callback_data: P = callback;
        unsafe extern "C" fn callback_func<P: FnMut(&Widget)>(widget: *mut gtk_sys::GtkWidget, data: glib_sys::gpointer) {
            let widget = from_glib_borrow(widget);
            let callback: *mut P = data as *const _ as usize as *mut P;
            (*callback)(&widget);
        }
        let callback = Some(callback_func::<P> as _);
        let super_callback0: &P = &callback_data;
        unsafe {
            gtk_sys::gtk_container_forall(self.as_ref().to_glib_none().0, callback, super_callback0 as *const _ as usize as *mut _);
        }
    }

    fn foreach<P: FnMut(&Widget)>(&self, callback: P) {
        let callback_data: P = callback;
        unsafe extern "C" fn callback_func<P: FnMut(&Widget)>(widget: *mut gtk_sys::GtkWidget, data: glib_sys::gpointer) {
            let widget = from_glib_borrow(widget);
            let callback: *mut P = data as *const _ as usize as *mut P;
            (*callback)(&widget);
        }
        let callback = Some(callback_func::<P> as _);
        let super_callback0: &P = &callback_data;
        unsafe {
            gtk_sys::gtk_container_foreach(self.as_ref().to_glib_none().0, callback, super_callback0 as *const _ as usize as *mut _);
        }
    }

    fn get_children(&self) -> Vec<Widget> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(gtk_sys::gtk_container_get_children(self.as_ref().to_glib_none().0))
        }
    }

    fn get_focus_hadjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(gtk_sys::gtk_container_get_focus_hadjustment(self.as_ref().to_glib_none().0))
        }
    }

    fn get_focus_vadjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(gtk_sys::gtk_container_get_focus_vadjustment(self.as_ref().to_glib_none().0))
        }
    }

    fn get_path_for_child<P: IsA<Widget>>(&self, child: &P) -> Option<WidgetPath> {
        unsafe {
            from_glib_full(gtk_sys::gtk_container_get_path_for_child(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0))
        }
    }

    fn remove<P: IsA<Widget>>(&self, widget: &P) {
        unsafe {
            gtk_sys::gtk_container_remove(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    fn set_focus_hadjustment<P: IsA<Adjustment>>(&self, adjustment: &P) {
        unsafe {
            gtk_sys::gtk_container_set_focus_hadjustment(self.as_ref().to_glib_none().0, adjustment.as_ref().to_glib_none().0);
        }
    }

    fn set_focus_vadjustment<P: IsA<Adjustment>>(&self, adjustment: &P) {
        unsafe {
            gtk_sys::gtk_container_set_focus_vadjustment(self.as_ref().to_glib_none().0, adjustment.as_ref().to_glib_none().0);
        }
    }

    fn connect_add<F: Fn(&Self, &Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"add\0".as_ptr() as *const _,
                Some(transmute(add_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_remove<F: Fn(&Self, &Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"remove\0".as_ptr() as *const _,
                Some(transmute(remove_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn add_trampoline<P, F: Fn(&P, &Widget) + 'static>(this: *mut gtk_sys::GtkContainer, object: *mut gtk_sys::GtkWidget, f: glib_sys::gpointer)
where P: IsA<Container> {
    let f: &F = &*(f as *const F);
    f(&Container::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(object))
}

unsafe extern "C" fn remove_trampoline<P, F: Fn(&P, &Widget) + 'static>(this: *mut gtk_sys::GtkContainer, object: *mut gtk_sys::GtkWidget, f: glib_sys::gpointer)
where P: IsA<Container> {
    let f: &F = &*(f as *const F);
    f(&Container::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(object))
}

impl fmt::Display for Container {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Container")
    }
}
