// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk_sys;
use glib::translate::*;
use AnchorHints;
use Gravity;
use Rectangle;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct PopupLayout(Shared<gdk_sys::GdkPopupLayout>);

    match fn {
        ref => |ptr| gdk_sys::gdk_popup_layout_ref(ptr),
        unref => |ptr| gdk_sys::gdk_popup_layout_unref(ptr),
        get_type => || gdk_sys::gdk_popup_layout_get_type(),
    }
}

impl PopupLayout {
    pub fn new(
        anchor_rect: &Rectangle,
        rect_anchor: Gravity,
        surface_anchor: Gravity,
    ) -> PopupLayout {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gdk_sys::gdk_popup_layout_new(
                anchor_rect.to_glib_none().0,
                rect_anchor.to_glib(),
                surface_anchor.to_glib(),
            ))
        }
    }

    pub fn copy(&self) -> Option<PopupLayout> {
        unsafe { from_glib_full(gdk_sys::gdk_popup_layout_copy(self.to_glib_none().0)) }
    }

    fn equal(&self, other: &PopupLayout) -> bool {
        unsafe {
            from_glib(gdk_sys::gdk_popup_layout_equal(
                self.to_glib_none().0,
                other.to_glib_none().0,
            ))
        }
    }

    pub fn get_anchor_hints(&self) -> AnchorHints {
        unsafe {
            from_glib(gdk_sys::gdk_popup_layout_get_anchor_hints(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_anchor_rect(&self) -> Option<Rectangle> {
        unsafe {
            from_glib_none(gdk_sys::gdk_popup_layout_get_anchor_rect(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_rect_anchor(&self) -> Gravity {
        unsafe {
            from_glib(gdk_sys::gdk_popup_layout_get_rect_anchor(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_surface_anchor(&self) -> Gravity {
        unsafe {
            from_glib(gdk_sys::gdk_popup_layout_get_surface_anchor(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_anchor_hints(&self, anchor_hints: AnchorHints) {
        unsafe {
            gdk_sys::gdk_popup_layout_set_anchor_hints(
                self.to_glib_none().0,
                anchor_hints.to_glib(),
            );
        }
    }

    pub fn set_anchor_rect(&self, anchor_rect: &Rectangle) {
        unsafe {
            gdk_sys::gdk_popup_layout_set_anchor_rect(
                self.to_glib_none().0,
                anchor_rect.to_glib_none().0,
            );
        }
    }

    pub fn set_offset(&self, dx: i32, dy: i32) {
        unsafe {
            gdk_sys::gdk_popup_layout_set_offset(self.to_glib_none().0, dx, dy);
        }
    }

    pub fn set_rect_anchor(&self, anchor: Gravity) {
        unsafe {
            gdk_sys::gdk_popup_layout_set_rect_anchor(self.to_glib_none().0, anchor.to_glib());
        }
    }

    pub fn set_surface_anchor(&self, anchor: Gravity) {
        unsafe {
            gdk_sys::gdk_popup_layout_set_surface_anchor(self.to_glib_none().0, anchor.to_glib());
        }
    }
}

impl PartialEq for PopupLayout {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for PopupLayout {}
