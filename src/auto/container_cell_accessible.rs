// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Accessible;
use CellAccessible;
use atk;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct ContainerCellAccessible(Object<gtk_sys::GtkContainerCellAccessible, gtk_sys::GtkContainerCellAccessibleClass, ContainerCellAccessibleClass>) @extends CellAccessible, Accessible, atk::Object;

    match fn {
        get_type => || gtk_sys::gtk_container_cell_accessible_get_type(),
    }
}

impl ContainerCellAccessible {
    pub fn new() -> ContainerCellAccessible {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_container_cell_accessible_new())
        }
    }
}

impl Default for ContainerCellAccessible {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_CONTAINER_CELL_ACCESSIBLE: Option<&ContainerCellAccessible> = None;

pub trait ContainerCellAccessibleExt: 'static {
    fn add_child<P: IsA<CellAccessible>>(&self, child: &P);

    fn get_children(&self) -> Vec<CellAccessible>;

    fn remove_child<P: IsA<CellAccessible>>(&self, child: &P);
}

impl<O: IsA<ContainerCellAccessible>> ContainerCellAccessibleExt for O {
    fn add_child<P: IsA<CellAccessible>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_container_cell_accessible_add_child(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    fn get_children(&self) -> Vec<CellAccessible> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(gtk_sys::gtk_container_cell_accessible_get_children(self.as_ref().to_glib_none().0))
        }
    }

    fn remove_child<P: IsA<CellAccessible>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_container_cell_accessible_remove_child(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for ContainerCellAccessible {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ContainerCellAccessible")
    }
}
