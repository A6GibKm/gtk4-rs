// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use LayoutChild;

glib_wrapper! {
    pub struct OverlayLayoutChild(Object<gtk_sys::GtkOverlayLayoutChild, gtk_sys::GtkOverlayLayoutChildClass, OverlayLayoutChildClass>) @extends LayoutChild;

    match fn {
        get_type => || gtk_sys::gtk_overlay_layout_child_get_type(),
    }
}

pub const NONE_OVERLAY_LAYOUT_CHILD: Option<&OverlayLayoutChild> = None;

pub trait OverlayLayoutChildExt: 'static {
    fn get_clip_overlay(&self) -> bool;

    fn get_measure(&self) -> bool;

    fn set_clip_overlay(&self, clip_overlay: bool);

    fn set_measure(&self, measure: bool);

    fn connect_property_clip_overlay_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_measure_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<OverlayLayoutChild>> OverlayLayoutChildExt for O {
    fn get_clip_overlay(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_overlay_layout_child_get_clip_overlay(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_measure(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_overlay_layout_child_get_measure(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_clip_overlay(&self, clip_overlay: bool) {
        unsafe {
            gtk_sys::gtk_overlay_layout_child_set_clip_overlay(
                self.as_ref().to_glib_none().0,
                clip_overlay.to_glib(),
            );
        }
    }

    fn set_measure(&self, measure: bool) {
        unsafe {
            gtk_sys::gtk_overlay_layout_child_set_measure(
                self.as_ref().to_glib_none().0,
                measure.to_glib(),
            );
        }
    }

    fn connect_property_clip_overlay_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_clip_overlay_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkOverlayLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<OverlayLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&OverlayLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::clip-overlay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_clip_overlay_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_measure_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_measure_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkOverlayLayoutChild,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<OverlayLayoutChild>,
        {
            let f: &F = &*(f as *const F);
            f(&OverlayLayoutChild::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::measure\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_measure_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for OverlayLayoutChild {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "OverlayLayoutChild")
    }
}
