// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use NotebookAccessible;
use Widget;
use atk;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct NotebookPageAccessible(Object<gtk_sys::GtkNotebookPageAccessible, gtk_sys::GtkNotebookPageAccessibleClass, NotebookPageAccessibleClass>) @extends atk::Object;

    match fn {
        get_type => || gtk_sys::gtk_notebook_page_accessible_get_type(),
    }
}

impl NotebookPageAccessible {
    pub fn new<P: IsA<NotebookAccessible>, Q: IsA<Widget>>(notebook: &P, child: &Q) -> NotebookPageAccessible {
        skip_assert_initialized!();
        unsafe {
            atk::Object::from_glib_full(gtk_sys::gtk_notebook_page_accessible_new(notebook.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_NOTEBOOK_PAGE_ACCESSIBLE: Option<&NotebookPageAccessible> = None;

pub trait NotebookPageAccessibleExt: 'static {
    fn invalidate(&self);
}

impl<O: IsA<NotebookPageAccessible>> NotebookPageAccessibleExt for O {
    fn invalidate(&self) {
        unsafe {
            gtk_sys::gtk_notebook_page_accessible_invalidate(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for NotebookPageAccessible {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "NotebookPageAccessible")
    }
}
