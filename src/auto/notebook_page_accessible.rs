// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct NotebookPageAccessible(Object<ffi::GtkNotebookPageAccessible, ffi::GtkNotebookPageAccessibleClass, NotebookPageAccessibleClass>);

    match fn {
        get_type => || ffi::gtk_notebook_page_accessible_get_type(),
    }
}

impl NotebookPageAccessible {
    //pub fn new<P: IsA<NotebookAccessible>, Q: IsA<Widget>>(notebook: &P, child: &Q) -> NotebookPageAccessible {
    //    unsafe { TODO: call ffi::gtk_notebook_page_accessible_new() }
    //}
}

pub const NONE_NOTEBOOK_PAGE_ACCESSIBLE: Option<&NotebookPageAccessible> = None;

pub trait NotebookPageAccessibleExt: 'static {
    fn invalidate(&self);
}

impl<O: IsA<NotebookPageAccessible>> NotebookPageAccessibleExt for O {
    fn invalidate(&self) {
        unsafe {
            ffi::gtk_notebook_page_accessible_invalidate(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for NotebookPageAccessible {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "NotebookPageAccessible")
    }
}
