// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Buildable;
use Container;
use Widget;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use std::mem;

glib_wrapper! {
    pub struct Fixed(Object<gtk_sys::GtkFixed, gtk_sys::GtkFixedClass, FixedClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_fixed_get_type(),
    }
}

impl Fixed {
    pub fn new() -> Fixed {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_fixed_new()).unsafe_cast()
        }
    }
}

impl Default for Fixed {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_FIXED: Option<&Fixed> = None;

pub trait FixedExt: 'static {
    fn get_child_position<P: IsA<Widget>>(&self, widget: &P) -> (i32, i32);

    //fn get_child_transform<P: IsA<Widget>>(&self, widget: &P) -> /*Ignored*/Option<gsk::Transform>;

    fn move_<P: IsA<Widget>>(&self, widget: &P, x: i32, y: i32);

    fn put<P: IsA<Widget>>(&self, widget: &P, x: i32, y: i32);

    //fn set_child_transform<P: IsA<Widget>>(&self, widget: &P, transform: /*Ignored*/Option<&gsk::Transform>);
}

impl<O: IsA<Fixed>> FixedExt for O {
    fn get_child_position<P: IsA<Widget>>(&self, widget: &P) -> (i32, i32) {
        unsafe {
            let mut x = mem::uninitialized();
            let mut y = mem::uninitialized();
            gtk_sys::gtk_fixed_get_child_position(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0, &mut x, &mut y);
            (x, y)
        }
    }

    //fn get_child_transform<P: IsA<Widget>>(&self, widget: &P) -> /*Ignored*/Option<gsk::Transform> {
    //    unsafe { TODO: call gtk_sys:gtk_fixed_get_child_transform() }
    //}

    fn move_<P: IsA<Widget>>(&self, widget: &P, x: i32, y: i32) {
        unsafe {
            gtk_sys::gtk_fixed_move(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0, x, y);
        }
    }

    fn put<P: IsA<Widget>>(&self, widget: &P, x: i32, y: i32) {
        unsafe {
            gtk_sys::gtk_fixed_put(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0, x, y);
        }
    }

    //fn set_child_transform<P: IsA<Widget>>(&self, widget: &P, transform: /*Ignored*/Option<&gsk::Transform>) {
    //    unsafe { TODO: call gtk_sys:gtk_fixed_set_child_transform() }
    //}
}

impl fmt::Display for Fixed {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Fixed")
    }
}
