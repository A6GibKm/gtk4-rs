// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Buildable;
use Error;
use Widget;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib_wrapper! {
    pub struct GLArea(Object<gtk_sys::GtkGLArea, gtk_sys::GtkGLAreaClass, GLAreaClass>) @extends Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_gl_area_get_type(),
    }
}

impl GLArea {
    pub fn new() -> GLArea {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_gl_area_new()).unsafe_cast()
        }
    }
}

impl Default for GLArea {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_GL_AREA: Option<&GLArea> = None;

pub trait GLAreaExt: 'static {
    fn attach_buffers(&self);

    fn get_auto_render(&self) -> bool;

    //fn get_context(&self) -> /*Ignored*/Option<gdk::GLContext>;

    fn get_error(&self) -> Option<Error>;

    fn get_has_depth_buffer(&self) -> bool;

    fn get_has_stencil_buffer(&self) -> bool;

    fn get_required_version(&self) -> (i32, i32);

    fn get_use_es(&self) -> bool;

    fn make_current(&self);

    fn queue_render(&self);

    fn set_auto_render(&self, auto_render: bool);

    fn set_error(&self, error: Option<&Error>);

    fn set_has_depth_buffer(&self, has_depth_buffer: bool);

    fn set_has_stencil_buffer(&self, has_stencil_buffer: bool);

    fn set_required_version(&self, major: i32, minor: i32);

    fn set_use_es(&self, use_es: bool);

    //fn connect_create_context<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_render<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_resize<F: Fn(&Self, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_auto_render_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_context_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_depth_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_stencil_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_use_es_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<GLArea>> GLAreaExt for O {
    fn attach_buffers(&self) {
        unsafe {
            gtk_sys::gtk_gl_area_attach_buffers(self.as_ref().to_glib_none().0);
        }
    }

    fn get_auto_render(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gl_area_get_auto_render(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_context(&self) -> /*Ignored*/Option<gdk::GLContext> {
    //    unsafe { TODO: call gtk_sys:gtk_gl_area_get_context() }
    //}

    fn get_error(&self) -> Option<Error> {
        unsafe {
            from_glib_none(gtk_sys::gtk_gl_area_get_error(self.as_ref().to_glib_none().0))
        }
    }

    fn get_has_depth_buffer(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gl_area_get_has_depth_buffer(self.as_ref().to_glib_none().0))
        }
    }

    fn get_has_stencil_buffer(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gl_area_get_has_stencil_buffer(self.as_ref().to_glib_none().0))
        }
    }

    fn get_required_version(&self) -> (i32, i32) {
        unsafe {
            let mut major = mem::uninitialized();
            let mut minor = mem::uninitialized();
            gtk_sys::gtk_gl_area_get_required_version(self.as_ref().to_glib_none().0, &mut major, &mut minor);
            (major, minor)
        }
    }

    fn get_use_es(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_gl_area_get_use_es(self.as_ref().to_glib_none().0))
        }
    }

    fn make_current(&self) {
        unsafe {
            gtk_sys::gtk_gl_area_make_current(self.as_ref().to_glib_none().0);
        }
    }

    fn queue_render(&self) {
        unsafe {
            gtk_sys::gtk_gl_area_queue_render(self.as_ref().to_glib_none().0);
        }
    }

    fn set_auto_render(&self, auto_render: bool) {
        unsafe {
            gtk_sys::gtk_gl_area_set_auto_render(self.as_ref().to_glib_none().0, auto_render.to_glib());
        }
    }

    fn set_error(&self, error: Option<&Error>) {
        unsafe {
            gtk_sys::gtk_gl_area_set_error(self.as_ref().to_glib_none().0, error.to_glib_none().0);
        }
    }

    fn set_has_depth_buffer(&self, has_depth_buffer: bool) {
        unsafe {
            gtk_sys::gtk_gl_area_set_has_depth_buffer(self.as_ref().to_glib_none().0, has_depth_buffer.to_glib());
        }
    }

    fn set_has_stencil_buffer(&self, has_stencil_buffer: bool) {
        unsafe {
            gtk_sys::gtk_gl_area_set_has_stencil_buffer(self.as_ref().to_glib_none().0, has_stencil_buffer.to_glib());
        }
    }

    fn set_required_version(&self, major: i32, minor: i32) {
        unsafe {
            gtk_sys::gtk_gl_area_set_required_version(self.as_ref().to_glib_none().0, major, minor);
        }
    }

    fn set_use_es(&self, use_es: bool) {
        unsafe {
            gtk_sys::gtk_gl_area_set_use_es(self.as_ref().to_glib_none().0, use_es.to_glib());
        }
    }

    //fn connect_create_context<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored return value Gdk.GLContext
    //}

    //fn connect_render<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored context: Gdk.GLContext
    //}

    fn connect_resize<F: Fn(&Self, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"resize\0".as_ptr() as *const _,
                Some(transmute(resize_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_auto_render_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::auto-render\0".as_ptr() as *const _,
                Some(transmute(notify_auto_render_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_context_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::context\0".as_ptr() as *const _,
                Some(transmute(notify_context_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_has_depth_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::has-depth-buffer\0".as_ptr() as *const _,
                Some(transmute(notify_has_depth_buffer_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_has_stencil_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::has-stencil-buffer\0".as_ptr() as *const _,
                Some(transmute(notify_has_stencil_buffer_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_use_es_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::use-es\0".as_ptr() as *const _,
                Some(transmute(notify_use_es_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn resize_trampoline<P, F: Fn(&P, i32, i32) + 'static>(this: *mut gtk_sys::GtkGLArea, width: libc::c_int, height: libc::c_int, f: glib_sys::gpointer)
where P: IsA<GLArea> {
    let f: &F = &*(f as *const F);
    f(&GLArea::from_glib_borrow(this).unsafe_cast(), width, height)
}

unsafe extern "C" fn notify_auto_render_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkGLArea, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<GLArea> {
    let f: &F = &*(f as *const F);
    f(&GLArea::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_context_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkGLArea, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<GLArea> {
    let f: &F = &*(f as *const F);
    f(&GLArea::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_has_depth_buffer_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkGLArea, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<GLArea> {
    let f: &F = &*(f as *const F);
    f(&GLArea::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_has_stencil_buffer_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkGLArea, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<GLArea> {
    let f: &F = &*(f as *const F);
    f(&GLArea::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_use_es_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkGLArea, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<GLArea> {
    let f: &F = &*(f as *const F);
    f(&GLArea::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for GLArea {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GLArea")
    }
}
