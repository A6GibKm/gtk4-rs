// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use Accessible;
use Buildable;
use ConstraintTarget;
use Native;
use Widget;

glib_wrapper! {
    pub struct Root(Interface<gtk_sys::GtkRoot>) @requires Native, Widget, Accessible, Buildable, ConstraintTarget;

    match fn {
        get_type => || gtk_sys::gtk_root_get_type(),
    }
}

pub const NONE_ROOT: Option<&Root> = None;

pub trait RootExt: 'static {
    fn get_focus(&self) -> Option<Widget>;

    fn set_focus<P: IsA<Widget>>(&self, focus: Option<&P>);
}

impl<O: IsA<Root>> RootExt for O {
    fn get_focus(&self) -> Option<Widget> {
        unsafe { from_glib_none(gtk_sys::gtk_root_get_focus(self.as_ref().to_glib_none().0)) }
    }

    fn set_focus<P: IsA<Widget>>(&self, focus: Option<&P>) {
        unsafe {
            gtk_sys::gtk_root_set_focus(
                self.as_ref().to_glib_none().0,
                focus.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for Root {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Root")
    }
}
