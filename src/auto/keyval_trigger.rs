// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib::object::Cast;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use ShortcutTrigger;

glib_wrapper! {
    pub struct KeyvalTrigger(Object<gtk_sys::GtkKeyvalTrigger, gtk_sys::GtkKeyvalTriggerClass, KeyvalTriggerClass>) @extends ShortcutTrigger;

    match fn {
        get_type => || gtk_sys::gtk_keyval_trigger_get_type(),
    }
}

impl KeyvalTrigger {
    pub fn new(keyval: u32, modifiers: gdk::ModifierType) -> KeyvalTrigger {
        assert_initialized_main_thread!();
        unsafe {
            ShortcutTrigger::from_glib_full(gtk_sys::gtk_keyval_trigger_new(
                keyval,
                modifiers.to_glib(),
            ))
            .unsafe_cast()
        }
    }

    pub fn get_keyval(&self) -> u32 {
        unsafe { gtk_sys::gtk_keyval_trigger_get_keyval(self.to_glib_none().0) }
    }

    pub fn get_modifiers(&self) -> gdk::ModifierType {
        unsafe {
            from_glib(gtk_sys::gtk_keyval_trigger_get_modifiers(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for KeyvalTrigger {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "KeyvalTrigger")
    }
}
