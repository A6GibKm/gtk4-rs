// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib::object::Cast;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct KeyvalTrigger(Object<gtk_sys::GtkKeyvalTrigger, gtk_sys::GtkKeyvalTriggerClass, KeyvalTriggerClass>);

    match fn {
        get_type => || gtk_sys::gtk_keyval_trigger_get_type(),
    }
}

impl KeyvalTrigger {
    //pub fn new(keyval: u32, modifiers: gdk::ModifierType) -> KeyvalTrigger {
    //    unsafe { TODO: call gtk_sys:gtk_keyval_trigger_new() }
    //}

    pub fn get_keyval(&self) -> u32 {
        unsafe { gtk_sys::gtk_keyval_trigger_get_keyval(self.to_glib_none().0) }
    }

    pub fn get_modifiers(&self) -> gdk::ModifierType {
        unsafe {
            from_glib(gtk_sys::gtk_keyval_trigger_get_modifiers(
                self.to_glib_none().0,
            ))
        }
    }
}

#[derive(Clone, Default)]
pub struct KeyvalTriggerBuilder {
    keyval: Option<u32>,
    modifiers: Option<gdk::ModifierType>,
}

impl KeyvalTriggerBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> KeyvalTrigger {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref keyval) = self.keyval {
            properties.push(("keyval", keyval));
        }
        if let Some(ref modifiers) = self.modifiers {
            properties.push(("modifiers", modifiers));
        }
        let ret = glib::Object::new(KeyvalTrigger::static_type(), &properties)
            .expect("object new")
            .downcast::<KeyvalTrigger>()
            .expect("downcast");
        ret
    }

    pub fn keyval(mut self, keyval: u32) -> Self {
        self.keyval = Some(keyval);
        self
    }

    pub fn modifiers(mut self, modifiers: gdk::ModifierType) -> Self {
        self.modifiers = Some(modifiers);
        self
    }
}

impl fmt::Display for KeyvalTrigger {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "KeyvalTrigger")
    }
}
