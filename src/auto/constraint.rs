// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use ConstraintAttribute;
use ConstraintRelation;
use ConstraintTarget;

glib_wrapper! {
    pub struct Constraint(Object<gtk_sys::GtkConstraint, gtk_sys::GtkConstraintClass, ConstraintClass>);

    match fn {
        get_type => || gtk_sys::gtk_constraint_get_type(),
    }
}

impl Constraint {
    pub fn new<P: IsA<ConstraintTarget>, Q: IsA<ConstraintTarget>>(
        target: Option<&P>,
        target_attribute: ConstraintAttribute,
        relation: ConstraintRelation,
        source: Option<&Q>,
        source_attribute: ConstraintAttribute,
        multiplier: f64,
        constant: f64,
        strength: i32,
    ) -> Constraint {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_constraint_new(
                target.map(|p| p.as_ref()).to_glib_none().0,
                target_attribute.to_glib(),
                relation.to_glib(),
                source.map(|p| p.as_ref()).to_glib_none().0,
                source_attribute.to_glib(),
                multiplier,
                constant,
                strength,
            ))
        }
    }

    pub fn new_constant<P: IsA<ConstraintTarget>>(
        target: Option<&P>,
        target_attribute: ConstraintAttribute,
        relation: ConstraintRelation,
        constant: f64,
        strength: i32,
    ) -> Constraint {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_constraint_new_constant(
                target.map(|p| p.as_ref()).to_glib_none().0,
                target_attribute.to_glib(),
                relation.to_glib(),
                constant,
                strength,
            ))
        }
    }
}

pub const NONE_CONSTRAINT: Option<&Constraint> = None;

pub trait ConstraintExt: 'static {
    fn get_constant(&self) -> f64;

    fn get_multiplier(&self) -> f64;

    fn get_relation(&self) -> ConstraintRelation;

    fn get_source(&self) -> Option<ConstraintTarget>;

    fn get_source_attribute(&self) -> ConstraintAttribute;

    fn get_strength(&self) -> i32;

    fn get_target(&self) -> Option<ConstraintTarget>;

    fn get_target_attribute(&self) -> ConstraintAttribute;

    fn is_attached(&self) -> bool;

    fn is_constant(&self) -> bool;

    fn is_required(&self) -> bool;
}

impl<O: IsA<Constraint>> ConstraintExt for O {
    fn get_constant(&self) -> f64 {
        unsafe { gtk_sys::gtk_constraint_get_constant(self.as_ref().to_glib_none().0) }
    }

    fn get_multiplier(&self) -> f64 {
        unsafe { gtk_sys::gtk_constraint_get_multiplier(self.as_ref().to_glib_none().0) }
    }

    fn get_relation(&self) -> ConstraintRelation {
        unsafe {
            from_glib(gtk_sys::gtk_constraint_get_relation(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_source(&self) -> Option<ConstraintTarget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_constraint_get_source(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_source_attribute(&self) -> ConstraintAttribute {
        unsafe {
            from_glib(gtk_sys::gtk_constraint_get_source_attribute(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_strength(&self) -> i32 {
        unsafe { gtk_sys::gtk_constraint_get_strength(self.as_ref().to_glib_none().0) }
    }

    fn get_target(&self) -> Option<ConstraintTarget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_constraint_get_target(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_target_attribute(&self) -> ConstraintAttribute {
        unsafe {
            from_glib(gtk_sys::gtk_constraint_get_target_attribute(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_attached(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_constraint_is_attached(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_constant(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_constraint_is_constant(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_required(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_constraint_is_required(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for Constraint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Constraint")
    }
}
