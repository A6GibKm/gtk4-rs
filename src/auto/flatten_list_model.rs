// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct FlattenListModel(Object<ffi::GtkFlattenListModel, ffi::GtkFlattenListModelClass, FlattenListModelClass>);

    match fn {
        get_type => || ffi::gtk_flatten_list_model_get_type(),
    }
}

impl FlattenListModel {
    //pub fn new(item_type: glib::types::Type, model: /*Ignored*/Option<&gio::ListModel>) -> FlattenListModel {
    //    unsafe { TODO: call ffi::gtk_flatten_list_model_new() }
    //}
}

pub const NONE_FLATTEN_LIST_MODEL: Option<&FlattenListModel> = None;

pub trait FlattenListModelExt: 'static {
    //fn get_model(&self) -> /*Ignored*/Option<gio::ListModel>;

    //fn set_model(&self, model: /*Ignored*/Option<&gio::ListModel>);

    fn get_property_item_type(&self) -> glib::types::Type;

    fn connect_property_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FlattenListModel>> FlattenListModelExt for O {
    //fn get_model(&self) -> /*Ignored*/Option<gio::ListModel> {
    //    unsafe { TODO: call ffi::gtk_flatten_list_model_get_model() }
    //}

    //fn set_model(&self, model: /*Ignored*/Option<&gio::ListModel>) {
    //    unsafe { TODO: call ffi::gtk_flatten_list_model_set_model() }
    //}

    fn get_property_item_type(&self) -> glib::types::Type {
        unsafe {
            let mut value = Value::from_type(<glib::types::Type as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"item-type\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_property_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::model\0".as_ptr() as *const _,
                Some(transmute(notify_model_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_model_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkFlattenListModel, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<FlattenListModel> {
    let f: &F = &*(f as *const F);
    f(&FlattenListModel::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for FlattenListModel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FlattenListModel")
    }
}
