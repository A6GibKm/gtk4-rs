// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk_sys;
use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum AxisUse {
    Ignore,
    X,
    Y,
    DeltaX,
    DeltaY,
    Pressure,
    Xtilt,
    Ytilt,
    Wheel,
    Distance,
    Rotation,
    Slider,
    Last,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for AxisUse {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "AxisUse::{}",
            match *self {
                AxisUse::Ignore => "Ignore",
                AxisUse::X => "X",
                AxisUse::Y => "Y",
                AxisUse::DeltaX => "DeltaX",
                AxisUse::DeltaY => "DeltaY",
                AxisUse::Pressure => "Pressure",
                AxisUse::Xtilt => "Xtilt",
                AxisUse::Ytilt => "Ytilt",
                AxisUse::Wheel => "Wheel",
                AxisUse::Distance => "Distance",
                AxisUse::Rotation => "Rotation",
                AxisUse::Slider => "Slider",
                AxisUse::Last => "Last",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for AxisUse {
    type GlibType = gdk_sys::GdkAxisUse;

    fn to_glib(&self) -> gdk_sys::GdkAxisUse {
        match *self {
            AxisUse::Ignore => gdk_sys::GDK_AXIS_IGNORE,
            AxisUse::X => gdk_sys::GDK_AXIS_X,
            AxisUse::Y => gdk_sys::GDK_AXIS_Y,
            AxisUse::DeltaX => gdk_sys::GDK_AXIS_DELTA_X,
            AxisUse::DeltaY => gdk_sys::GDK_AXIS_DELTA_Y,
            AxisUse::Pressure => gdk_sys::GDK_AXIS_PRESSURE,
            AxisUse::Xtilt => gdk_sys::GDK_AXIS_XTILT,
            AxisUse::Ytilt => gdk_sys::GDK_AXIS_YTILT,
            AxisUse::Wheel => gdk_sys::GDK_AXIS_WHEEL,
            AxisUse::Distance => gdk_sys::GDK_AXIS_DISTANCE,
            AxisUse::Rotation => gdk_sys::GDK_AXIS_ROTATION,
            AxisUse::Slider => gdk_sys::GDK_AXIS_SLIDER,
            AxisUse::Last => gdk_sys::GDK_AXIS_LAST,
            AxisUse::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkAxisUse> for AxisUse {
    fn from_glib(value: gdk_sys::GdkAxisUse) -> Self {
        skip_assert_initialized!();
        match value {
            0 => AxisUse::Ignore,
            1 => AxisUse::X,
            2 => AxisUse::Y,
            3 => AxisUse::DeltaX,
            4 => AxisUse::DeltaY,
            5 => AxisUse::Pressure,
            6 => AxisUse::Xtilt,
            7 => AxisUse::Ytilt,
            8 => AxisUse::Wheel,
            9 => AxisUse::Distance,
            10 => AxisUse::Rotation,
            11 => AxisUse::Slider,
            12 => AxisUse::Last,
            value => AxisUse::__Unknown(value),
        }
    }
}

impl StaticType for AxisUse {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_axis_use_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for AxisUse {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for AxisUse {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for AxisUse {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum CrossingMode {
    Normal,
    Grab,
    Ungrab,
    GtkGrab,
    GtkUngrab,
    StateChanged,
    TouchBegin,
    TouchEnd,
    DeviceSwitch,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CrossingMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CrossingMode::{}",
            match *self {
                CrossingMode::Normal => "Normal",
                CrossingMode::Grab => "Grab",
                CrossingMode::Ungrab => "Ungrab",
                CrossingMode::GtkGrab => "GtkGrab",
                CrossingMode::GtkUngrab => "GtkUngrab",
                CrossingMode::StateChanged => "StateChanged",
                CrossingMode::TouchBegin => "TouchBegin",
                CrossingMode::TouchEnd => "TouchEnd",
                CrossingMode::DeviceSwitch => "DeviceSwitch",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for CrossingMode {
    type GlibType = gdk_sys::GdkCrossingMode;

    fn to_glib(&self) -> gdk_sys::GdkCrossingMode {
        match *self {
            CrossingMode::Normal => gdk_sys::GDK_CROSSING_NORMAL,
            CrossingMode::Grab => gdk_sys::GDK_CROSSING_GRAB,
            CrossingMode::Ungrab => gdk_sys::GDK_CROSSING_UNGRAB,
            CrossingMode::GtkGrab => gdk_sys::GDK_CROSSING_GTK_GRAB,
            CrossingMode::GtkUngrab => gdk_sys::GDK_CROSSING_GTK_UNGRAB,
            CrossingMode::StateChanged => gdk_sys::GDK_CROSSING_STATE_CHANGED,
            CrossingMode::TouchBegin => gdk_sys::GDK_CROSSING_TOUCH_BEGIN,
            CrossingMode::TouchEnd => gdk_sys::GDK_CROSSING_TOUCH_END,
            CrossingMode::DeviceSwitch => gdk_sys::GDK_CROSSING_DEVICE_SWITCH,
            CrossingMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkCrossingMode> for CrossingMode {
    fn from_glib(value: gdk_sys::GdkCrossingMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CrossingMode::Normal,
            1 => CrossingMode::Grab,
            2 => CrossingMode::Ungrab,
            3 => CrossingMode::GtkGrab,
            4 => CrossingMode::GtkUngrab,
            5 => CrossingMode::StateChanged,
            6 => CrossingMode::TouchBegin,
            7 => CrossingMode::TouchEnd,
            8 => CrossingMode::DeviceSwitch,
            value => CrossingMode::__Unknown(value),
        }
    }
}

impl StaticType for CrossingMode {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_crossing_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CrossingMode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CrossingMode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CrossingMode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum DevicePadFeature {
    Button,
    Ring,
    Strip,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DevicePadFeature {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DevicePadFeature::{}",
            match *self {
                DevicePadFeature::Button => "Button",
                DevicePadFeature::Ring => "Ring",
                DevicePadFeature::Strip => "Strip",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for DevicePadFeature {
    type GlibType = gdk_sys::GdkDevicePadFeature;

    fn to_glib(&self) -> gdk_sys::GdkDevicePadFeature {
        match *self {
            DevicePadFeature::Button => gdk_sys::GDK_DEVICE_PAD_FEATURE_BUTTON,
            DevicePadFeature::Ring => gdk_sys::GDK_DEVICE_PAD_FEATURE_RING,
            DevicePadFeature::Strip => gdk_sys::GDK_DEVICE_PAD_FEATURE_STRIP,
            DevicePadFeature::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkDevicePadFeature> for DevicePadFeature {
    fn from_glib(value: gdk_sys::GdkDevicePadFeature) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DevicePadFeature::Button,
            1 => DevicePadFeature::Ring,
            2 => DevicePadFeature::Strip,
            value => DevicePadFeature::__Unknown(value),
        }
    }
}

impl StaticType for DevicePadFeature {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_device_pad_feature_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DevicePadFeature {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DevicePadFeature {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for DevicePadFeature {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum DeviceToolType {
    Unknown,
    Pen,
    Eraser,
    Brush,
    Pencil,
    Airbrush,
    Mouse,
    Lens,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DeviceToolType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DeviceToolType::{}",
            match *self {
                DeviceToolType::Unknown => "Unknown",
                DeviceToolType::Pen => "Pen",
                DeviceToolType::Eraser => "Eraser",
                DeviceToolType::Brush => "Brush",
                DeviceToolType::Pencil => "Pencil",
                DeviceToolType::Airbrush => "Airbrush",
                DeviceToolType::Mouse => "Mouse",
                DeviceToolType::Lens => "Lens",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for DeviceToolType {
    type GlibType = gdk_sys::GdkDeviceToolType;

    fn to_glib(&self) -> gdk_sys::GdkDeviceToolType {
        match *self {
            DeviceToolType::Unknown => gdk_sys::GDK_DEVICE_TOOL_TYPE_UNKNOWN,
            DeviceToolType::Pen => gdk_sys::GDK_DEVICE_TOOL_TYPE_PEN,
            DeviceToolType::Eraser => gdk_sys::GDK_DEVICE_TOOL_TYPE_ERASER,
            DeviceToolType::Brush => gdk_sys::GDK_DEVICE_TOOL_TYPE_BRUSH,
            DeviceToolType::Pencil => gdk_sys::GDK_DEVICE_TOOL_TYPE_PENCIL,
            DeviceToolType::Airbrush => gdk_sys::GDK_DEVICE_TOOL_TYPE_AIRBRUSH,
            DeviceToolType::Mouse => gdk_sys::GDK_DEVICE_TOOL_TYPE_MOUSE,
            DeviceToolType::Lens => gdk_sys::GDK_DEVICE_TOOL_TYPE_LENS,
            DeviceToolType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkDeviceToolType> for DeviceToolType {
    fn from_glib(value: gdk_sys::GdkDeviceToolType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DeviceToolType::Unknown,
            1 => DeviceToolType::Pen,
            2 => DeviceToolType::Eraser,
            3 => DeviceToolType::Brush,
            4 => DeviceToolType::Pencil,
            5 => DeviceToolType::Airbrush,
            6 => DeviceToolType::Mouse,
            7 => DeviceToolType::Lens,
            value => DeviceToolType::__Unknown(value),
        }
    }
}

impl StaticType for DeviceToolType {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_device_tool_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DeviceToolType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DeviceToolType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for DeviceToolType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum DragCancelReason {
    NoTarget,
    UserCancelled,
    Error,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DragCancelReason {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DragCancelReason::{}",
            match *self {
                DragCancelReason::NoTarget => "NoTarget",
                DragCancelReason::UserCancelled => "UserCancelled",
                DragCancelReason::Error => "Error",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for DragCancelReason {
    type GlibType = gdk_sys::GdkDragCancelReason;

    fn to_glib(&self) -> gdk_sys::GdkDragCancelReason {
        match *self {
            DragCancelReason::NoTarget => gdk_sys::GDK_DRAG_CANCEL_NO_TARGET,
            DragCancelReason::UserCancelled => gdk_sys::GDK_DRAG_CANCEL_USER_CANCELLED,
            DragCancelReason::Error => gdk_sys::GDK_DRAG_CANCEL_ERROR,
            DragCancelReason::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkDragCancelReason> for DragCancelReason {
    fn from_glib(value: gdk_sys::GdkDragCancelReason) -> Self {
        skip_assert_initialized!();
        match value {
            0 => DragCancelReason::NoTarget,
            1 => DragCancelReason::UserCancelled,
            2 => DragCancelReason::Error,
            value => DragCancelReason::__Unknown(value),
        }
    }
}

impl StaticType for DragCancelReason {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_drag_cancel_reason_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DragCancelReason {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DragCancelReason {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for DragCancelReason {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum EventType {
    Delete,
    MotionNotify,
    ButtonPress,
    ButtonRelease,
    KeyPress,
    KeyRelease,
    EnterNotify,
    LeaveNotify,
    FocusChange,
    Configure,
    ProximityIn,
    ProximityOut,
    DragEnter,
    DragLeave,
    DragMotion,
    DropStart,
    Scroll,
    GrabBroken,
    TouchBegin,
    TouchUpdate,
    TouchEnd,
    TouchCancel,
    TouchpadSwipe,
    TouchpadPinch,
    PadButtonPress,
    PadButtonRelease,
    PadRing,
    PadStrip,
    PadGroupMode,
    EventLast,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventType::{}",
            match *self {
                EventType::Delete => "Delete",
                EventType::MotionNotify => "MotionNotify",
                EventType::ButtonPress => "ButtonPress",
                EventType::ButtonRelease => "ButtonRelease",
                EventType::KeyPress => "KeyPress",
                EventType::KeyRelease => "KeyRelease",
                EventType::EnterNotify => "EnterNotify",
                EventType::LeaveNotify => "LeaveNotify",
                EventType::FocusChange => "FocusChange",
                EventType::Configure => "Configure",
                EventType::ProximityIn => "ProximityIn",
                EventType::ProximityOut => "ProximityOut",
                EventType::DragEnter => "DragEnter",
                EventType::DragLeave => "DragLeave",
                EventType::DragMotion => "DragMotion",
                EventType::DropStart => "DropStart",
                EventType::Scroll => "Scroll",
                EventType::GrabBroken => "GrabBroken",
                EventType::TouchBegin => "TouchBegin",
                EventType::TouchUpdate => "TouchUpdate",
                EventType::TouchEnd => "TouchEnd",
                EventType::TouchCancel => "TouchCancel",
                EventType::TouchpadSwipe => "TouchpadSwipe",
                EventType::TouchpadPinch => "TouchpadPinch",
                EventType::PadButtonPress => "PadButtonPress",
                EventType::PadButtonRelease => "PadButtonRelease",
                EventType::PadRing => "PadRing",
                EventType::PadStrip => "PadStrip",
                EventType::PadGroupMode => "PadGroupMode",
                EventType::EventLast => "EventLast",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for EventType {
    type GlibType = gdk_sys::GdkEventType;

    fn to_glib(&self) -> gdk_sys::GdkEventType {
        match *self {
            EventType::Delete => gdk_sys::GDK_DELETE,
            EventType::MotionNotify => gdk_sys::GDK_MOTION_NOTIFY,
            EventType::ButtonPress => gdk_sys::GDK_BUTTON_PRESS,
            EventType::ButtonRelease => gdk_sys::GDK_BUTTON_RELEASE,
            EventType::KeyPress => gdk_sys::GDK_KEY_PRESS,
            EventType::KeyRelease => gdk_sys::GDK_KEY_RELEASE,
            EventType::EnterNotify => gdk_sys::GDK_ENTER_NOTIFY,
            EventType::LeaveNotify => gdk_sys::GDK_LEAVE_NOTIFY,
            EventType::FocusChange => gdk_sys::GDK_FOCUS_CHANGE,
            EventType::Configure => gdk_sys::GDK_CONFIGURE,
            EventType::ProximityIn => gdk_sys::GDK_PROXIMITY_IN,
            EventType::ProximityOut => gdk_sys::GDK_PROXIMITY_OUT,
            EventType::DragEnter => gdk_sys::GDK_DRAG_ENTER,
            EventType::DragLeave => gdk_sys::GDK_DRAG_LEAVE,
            EventType::DragMotion => gdk_sys::GDK_DRAG_MOTION,
            EventType::DropStart => gdk_sys::GDK_DROP_START,
            EventType::Scroll => gdk_sys::GDK_SCROLL,
            EventType::GrabBroken => gdk_sys::GDK_GRAB_BROKEN,
            EventType::TouchBegin => gdk_sys::GDK_TOUCH_BEGIN,
            EventType::TouchUpdate => gdk_sys::GDK_TOUCH_UPDATE,
            EventType::TouchEnd => gdk_sys::GDK_TOUCH_END,
            EventType::TouchCancel => gdk_sys::GDK_TOUCH_CANCEL,
            EventType::TouchpadSwipe => gdk_sys::GDK_TOUCHPAD_SWIPE,
            EventType::TouchpadPinch => gdk_sys::GDK_TOUCHPAD_PINCH,
            EventType::PadButtonPress => gdk_sys::GDK_PAD_BUTTON_PRESS,
            EventType::PadButtonRelease => gdk_sys::GDK_PAD_BUTTON_RELEASE,
            EventType::PadRing => gdk_sys::GDK_PAD_RING,
            EventType::PadStrip => gdk_sys::GDK_PAD_STRIP,
            EventType::PadGroupMode => gdk_sys::GDK_PAD_GROUP_MODE,
            EventType::EventLast => gdk_sys::GDK_EVENT_LAST,
            EventType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkEventType> for EventType {
    fn from_glib(value: gdk_sys::GdkEventType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => EventType::Delete,
            1 => EventType::MotionNotify,
            2 => EventType::ButtonPress,
            3 => EventType::ButtonRelease,
            4 => EventType::KeyPress,
            5 => EventType::KeyRelease,
            6 => EventType::EnterNotify,
            7 => EventType::LeaveNotify,
            8 => EventType::FocusChange,
            9 => EventType::Configure,
            10 => EventType::ProximityIn,
            11 => EventType::ProximityOut,
            12 => EventType::DragEnter,
            13 => EventType::DragLeave,
            14 => EventType::DragMotion,
            15 => EventType::DropStart,
            16 => EventType::Scroll,
            17 => EventType::GrabBroken,
            18 => EventType::TouchBegin,
            19 => EventType::TouchUpdate,
            20 => EventType::TouchEnd,
            21 => EventType::TouchCancel,
            22 => EventType::TouchpadSwipe,
            23 => EventType::TouchpadPinch,
            24 => EventType::PadButtonPress,
            25 => EventType::PadButtonRelease,
            26 => EventType::PadRing,
            27 => EventType::PadStrip,
            28 => EventType::PadGroupMode,
            29 => EventType::EventLast,
            value => EventType::__Unknown(value),
        }
    }
}

impl StaticType for EventType {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_event_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum FullscreenMode {
    CurrentMonitor,
    AllMonitors,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FullscreenMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FullscreenMode::{}",
            match *self {
                FullscreenMode::CurrentMonitor => "CurrentMonitor",
                FullscreenMode::AllMonitors => "AllMonitors",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for FullscreenMode {
    type GlibType = gdk_sys::GdkFullscreenMode;

    fn to_glib(&self) -> gdk_sys::GdkFullscreenMode {
        match *self {
            FullscreenMode::CurrentMonitor => gdk_sys::GDK_FULLSCREEN_ON_CURRENT_MONITOR,
            FullscreenMode::AllMonitors => gdk_sys::GDK_FULLSCREEN_ON_ALL_MONITORS,
            FullscreenMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkFullscreenMode> for FullscreenMode {
    fn from_glib(value: gdk_sys::GdkFullscreenMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => FullscreenMode::CurrentMonitor,
            1 => FullscreenMode::AllMonitors,
            value => FullscreenMode::__Unknown(value),
        }
    }
}

impl StaticType for FullscreenMode {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_fullscreen_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FullscreenMode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FullscreenMode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for FullscreenMode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum GLError {
    NotAvailable,
    UnsupportedFormat,
    UnsupportedProfile,
    CompilationFailed,
    LinkFailed,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for GLError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "GLError::{}",
            match *self {
                GLError::NotAvailable => "NotAvailable",
                GLError::UnsupportedFormat => "UnsupportedFormat",
                GLError::UnsupportedProfile => "UnsupportedProfile",
                GLError::CompilationFailed => "CompilationFailed",
                GLError::LinkFailed => "LinkFailed",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for GLError {
    type GlibType = gdk_sys::GdkGLError;

    fn to_glib(&self) -> gdk_sys::GdkGLError {
        match *self {
            GLError::NotAvailable => gdk_sys::GDK_GL_ERROR_NOT_AVAILABLE,
            GLError::UnsupportedFormat => gdk_sys::GDK_GL_ERROR_UNSUPPORTED_FORMAT,
            GLError::UnsupportedProfile => gdk_sys::GDK_GL_ERROR_UNSUPPORTED_PROFILE,
            GLError::CompilationFailed => gdk_sys::GDK_GL_ERROR_COMPILATION_FAILED,
            GLError::LinkFailed => gdk_sys::GDK_GL_ERROR_LINK_FAILED,
            GLError::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkGLError> for GLError {
    fn from_glib(value: gdk_sys::GdkGLError) -> Self {
        skip_assert_initialized!();
        match value {
            0 => GLError::NotAvailable,
            1 => GLError::UnsupportedFormat,
            2 => GLError::UnsupportedProfile,
            3 => GLError::CompilationFailed,
            4 => GLError::LinkFailed,
            value => GLError::__Unknown(value),
        }
    }
}

impl ErrorDomain for GLError {
    fn domain() -> Quark {
        skip_assert_initialized!();
        unsafe { from_glib(gdk_sys::gdk_gl_error_quark()) }
    }

    fn code(self) -> i32 {
        self.to_glib()
    }

    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match code {
            0 => Some(GLError::NotAvailable),
            1 => Some(GLError::UnsupportedFormat),
            2 => Some(GLError::UnsupportedProfile),
            3 => Some(GLError::CompilationFailed),
            4 => Some(GLError::LinkFailed),
            value => Some(GLError::__Unknown(value)),
        }
    }
}

impl StaticType for GLError {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_gl_error_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for GLError {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for GLError {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for GLError {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum Gravity {
    NorthWest,
    North,
    NorthEast,
    West,
    Center,
    East,
    SouthWest,
    South,
    SouthEast,
    Static,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Gravity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Gravity::{}",
            match *self {
                Gravity::NorthWest => "NorthWest",
                Gravity::North => "North",
                Gravity::NorthEast => "NorthEast",
                Gravity::West => "West",
                Gravity::Center => "Center",
                Gravity::East => "East",
                Gravity::SouthWest => "SouthWest",
                Gravity::South => "South",
                Gravity::SouthEast => "SouthEast",
                Gravity::Static => "Static",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for Gravity {
    type GlibType = gdk_sys::GdkGravity;

    fn to_glib(&self) -> gdk_sys::GdkGravity {
        match *self {
            Gravity::NorthWest => gdk_sys::GDK_GRAVITY_NORTH_WEST,
            Gravity::North => gdk_sys::GDK_GRAVITY_NORTH,
            Gravity::NorthEast => gdk_sys::GDK_GRAVITY_NORTH_EAST,
            Gravity::West => gdk_sys::GDK_GRAVITY_WEST,
            Gravity::Center => gdk_sys::GDK_GRAVITY_CENTER,
            Gravity::East => gdk_sys::GDK_GRAVITY_EAST,
            Gravity::SouthWest => gdk_sys::GDK_GRAVITY_SOUTH_WEST,
            Gravity::South => gdk_sys::GDK_GRAVITY_SOUTH,
            Gravity::SouthEast => gdk_sys::GDK_GRAVITY_SOUTH_EAST,
            Gravity::Static => gdk_sys::GDK_GRAVITY_STATIC,
            Gravity::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkGravity> for Gravity {
    fn from_glib(value: gdk_sys::GdkGravity) -> Self {
        skip_assert_initialized!();
        match value {
            1 => Gravity::NorthWest,
            2 => Gravity::North,
            3 => Gravity::NorthEast,
            4 => Gravity::West,
            5 => Gravity::Center,
            6 => Gravity::East,
            7 => Gravity::SouthWest,
            8 => Gravity::South,
            9 => Gravity::SouthEast,
            10 => Gravity::Static,
            value => Gravity::__Unknown(value),
        }
    }
}

impl StaticType for Gravity {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_gravity_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Gravity {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Gravity {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Gravity {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum InputSource {
    Mouse,
    Pen,
    Keyboard,
    Touchscreen,
    Touchpad,
    Trackpoint,
    TabletPad,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for InputSource {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "InputSource::{}",
            match *self {
                InputSource::Mouse => "Mouse",
                InputSource::Pen => "Pen",
                InputSource::Keyboard => "Keyboard",
                InputSource::Touchscreen => "Touchscreen",
                InputSource::Touchpad => "Touchpad",
                InputSource::Trackpoint => "Trackpoint",
                InputSource::TabletPad => "TabletPad",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for InputSource {
    type GlibType = gdk_sys::GdkInputSource;

    fn to_glib(&self) -> gdk_sys::GdkInputSource {
        match *self {
            InputSource::Mouse => gdk_sys::GDK_SOURCE_MOUSE,
            InputSource::Pen => gdk_sys::GDK_SOURCE_PEN,
            InputSource::Keyboard => gdk_sys::GDK_SOURCE_KEYBOARD,
            InputSource::Touchscreen => gdk_sys::GDK_SOURCE_TOUCHSCREEN,
            InputSource::Touchpad => gdk_sys::GDK_SOURCE_TOUCHPAD,
            InputSource::Trackpoint => gdk_sys::GDK_SOURCE_TRACKPOINT,
            InputSource::TabletPad => gdk_sys::GDK_SOURCE_TABLET_PAD,
            InputSource::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkInputSource> for InputSource {
    fn from_glib(value: gdk_sys::GdkInputSource) -> Self {
        skip_assert_initialized!();
        match value {
            0 => InputSource::Mouse,
            1 => InputSource::Pen,
            2 => InputSource::Keyboard,
            3 => InputSource::Touchscreen,
            4 => InputSource::Touchpad,
            5 => InputSource::Trackpoint,
            6 => InputSource::TabletPad,
            value => InputSource::__Unknown(value),
        }
    }
}

impl StaticType for InputSource {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_input_source_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for InputSource {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for InputSource {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for InputSource {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum KeyMatch {
    None,
    Partial,
    Exact,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for KeyMatch {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "KeyMatch::{}",
            match *self {
                KeyMatch::None => "None",
                KeyMatch::Partial => "Partial",
                KeyMatch::Exact => "Exact",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for KeyMatch {
    type GlibType = gdk_sys::GdkKeyMatch;

    fn to_glib(&self) -> gdk_sys::GdkKeyMatch {
        match *self {
            KeyMatch::None => gdk_sys::GDK_KEY_MATCH_NONE,
            KeyMatch::Partial => gdk_sys::GDK_KEY_MATCH_PARTIAL,
            KeyMatch::Exact => gdk_sys::GDK_KEY_MATCH_EXACT,
            KeyMatch::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkKeyMatch> for KeyMatch {
    fn from_glib(value: gdk_sys::GdkKeyMatch) -> Self {
        skip_assert_initialized!();
        match value {
            0 => KeyMatch::None,
            1 => KeyMatch::Partial,
            2 => KeyMatch::Exact,
            value => KeyMatch::__Unknown(value),
        }
    }
}

impl StaticType for KeyMatch {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_key_match_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for KeyMatch {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for KeyMatch {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for KeyMatch {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum MemoryFormat {
    B8g8r8a8Premultiplied,
    A8r8g8b8Premultiplied,
    B8g8r8a8,
    A8r8g8b8,
    R8g8b8a8,
    A8b8g8r8,
    R8g8b8,
    B8g8r8,
    NFormats,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MemoryFormat {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MemoryFormat::{}",
            match *self {
                MemoryFormat::B8g8r8a8Premultiplied => "B8g8r8a8Premultiplied",
                MemoryFormat::A8r8g8b8Premultiplied => "A8r8g8b8Premultiplied",
                MemoryFormat::B8g8r8a8 => "B8g8r8a8",
                MemoryFormat::A8r8g8b8 => "A8r8g8b8",
                MemoryFormat::R8g8b8a8 => "R8g8b8a8",
                MemoryFormat::A8b8g8r8 => "A8b8g8r8",
                MemoryFormat::R8g8b8 => "R8g8b8",
                MemoryFormat::B8g8r8 => "B8g8r8",
                MemoryFormat::NFormats => "NFormats",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for MemoryFormat {
    type GlibType = gdk_sys::GdkMemoryFormat;

    fn to_glib(&self) -> gdk_sys::GdkMemoryFormat {
        match *self {
            MemoryFormat::B8g8r8a8Premultiplied => gdk_sys::GDK_MEMORY_B8G8R8A8_PREMULTIPLIED,
            MemoryFormat::A8r8g8b8Premultiplied => gdk_sys::GDK_MEMORY_A8R8G8B8_PREMULTIPLIED,
            MemoryFormat::B8g8r8a8 => gdk_sys::GDK_MEMORY_B8G8R8A8,
            MemoryFormat::A8r8g8b8 => gdk_sys::GDK_MEMORY_A8R8G8B8,
            MemoryFormat::R8g8b8a8 => gdk_sys::GDK_MEMORY_R8G8B8A8,
            MemoryFormat::A8b8g8r8 => gdk_sys::GDK_MEMORY_A8B8G8R8,
            MemoryFormat::R8g8b8 => gdk_sys::GDK_MEMORY_R8G8B8,
            MemoryFormat::B8g8r8 => gdk_sys::GDK_MEMORY_B8G8R8,
            MemoryFormat::NFormats => gdk_sys::GDK_MEMORY_N_FORMATS,
            MemoryFormat::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkMemoryFormat> for MemoryFormat {
    fn from_glib(value: gdk_sys::GdkMemoryFormat) -> Self {
        skip_assert_initialized!();
        match value {
            0 => MemoryFormat::B8g8r8a8Premultiplied,
            1 => MemoryFormat::A8r8g8b8Premultiplied,
            2 => MemoryFormat::B8g8r8a8,
            3 => MemoryFormat::A8r8g8b8,
            4 => MemoryFormat::R8g8b8a8,
            5 => MemoryFormat::A8b8g8r8,
            6 => MemoryFormat::R8g8b8,
            7 => MemoryFormat::B8g8r8,
            8 => MemoryFormat::NFormats,
            value => MemoryFormat::__Unknown(value),
        }
    }
}

impl StaticType for MemoryFormat {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_memory_format_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for MemoryFormat {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for MemoryFormat {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for MemoryFormat {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum NotifyType {
    Ancestor,
    Virtual,
    Inferior,
    Nonlinear,
    NonlinearVirtual,
    Unknown,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for NotifyType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "NotifyType::{}",
            match *self {
                NotifyType::Ancestor => "Ancestor",
                NotifyType::Virtual => "Virtual",
                NotifyType::Inferior => "Inferior",
                NotifyType::Nonlinear => "Nonlinear",
                NotifyType::NonlinearVirtual => "NonlinearVirtual",
                NotifyType::Unknown => "Unknown",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for NotifyType {
    type GlibType = gdk_sys::GdkNotifyType;

    fn to_glib(&self) -> gdk_sys::GdkNotifyType {
        match *self {
            NotifyType::Ancestor => gdk_sys::GDK_NOTIFY_ANCESTOR,
            NotifyType::Virtual => gdk_sys::GDK_NOTIFY_VIRTUAL,
            NotifyType::Inferior => gdk_sys::GDK_NOTIFY_INFERIOR,
            NotifyType::Nonlinear => gdk_sys::GDK_NOTIFY_NONLINEAR,
            NotifyType::NonlinearVirtual => gdk_sys::GDK_NOTIFY_NONLINEAR_VIRTUAL,
            NotifyType::Unknown => gdk_sys::GDK_NOTIFY_UNKNOWN,
            NotifyType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkNotifyType> for NotifyType {
    fn from_glib(value: gdk_sys::GdkNotifyType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => NotifyType::Ancestor,
            1 => NotifyType::Virtual,
            2 => NotifyType::Inferior,
            3 => NotifyType::Nonlinear,
            4 => NotifyType::NonlinearVirtual,
            5 => NotifyType::Unknown,
            value => NotifyType::__Unknown(value),
        }
    }
}

impl StaticType for NotifyType {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_notify_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for NotifyType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for NotifyType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for NotifyType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum ScrollDirection {
    Up,
    Down,
    Left,
    Right,
    Smooth,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ScrollDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ScrollDirection::{}",
            match *self {
                ScrollDirection::Up => "Up",
                ScrollDirection::Down => "Down",
                ScrollDirection::Left => "Left",
                ScrollDirection::Right => "Right",
                ScrollDirection::Smooth => "Smooth",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for ScrollDirection {
    type GlibType = gdk_sys::GdkScrollDirection;

    fn to_glib(&self) -> gdk_sys::GdkScrollDirection {
        match *self {
            ScrollDirection::Up => gdk_sys::GDK_SCROLL_UP,
            ScrollDirection::Down => gdk_sys::GDK_SCROLL_DOWN,
            ScrollDirection::Left => gdk_sys::GDK_SCROLL_LEFT,
            ScrollDirection::Right => gdk_sys::GDK_SCROLL_RIGHT,
            ScrollDirection::Smooth => gdk_sys::GDK_SCROLL_SMOOTH,
            ScrollDirection::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkScrollDirection> for ScrollDirection {
    fn from_glib(value: gdk_sys::GdkScrollDirection) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ScrollDirection::Up,
            1 => ScrollDirection::Down,
            2 => ScrollDirection::Left,
            3 => ScrollDirection::Right,
            4 => ScrollDirection::Smooth,
            value => ScrollDirection::__Unknown(value),
        }
    }
}

impl StaticType for ScrollDirection {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_scroll_direction_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ScrollDirection {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ScrollDirection {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ScrollDirection {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum SubpixelLayout {
    Unknown,
    None,
    HorizontalRgb,
    HorizontalBgr,
    VerticalRgb,
    VerticalBgr,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SubpixelLayout {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SubpixelLayout::{}",
            match *self {
                SubpixelLayout::Unknown => "Unknown",
                SubpixelLayout::None => "None",
                SubpixelLayout::HorizontalRgb => "HorizontalRgb",
                SubpixelLayout::HorizontalBgr => "HorizontalBgr",
                SubpixelLayout::VerticalRgb => "VerticalRgb",
                SubpixelLayout::VerticalBgr => "VerticalBgr",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SubpixelLayout {
    type GlibType = gdk_sys::GdkSubpixelLayout;

    fn to_glib(&self) -> gdk_sys::GdkSubpixelLayout {
        match *self {
            SubpixelLayout::Unknown => gdk_sys::GDK_SUBPIXEL_LAYOUT_UNKNOWN,
            SubpixelLayout::None => gdk_sys::GDK_SUBPIXEL_LAYOUT_NONE,
            SubpixelLayout::HorizontalRgb => gdk_sys::GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB,
            SubpixelLayout::HorizontalBgr => gdk_sys::GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR,
            SubpixelLayout::VerticalRgb => gdk_sys::GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB,
            SubpixelLayout::VerticalBgr => gdk_sys::GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR,
            SubpixelLayout::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkSubpixelLayout> for SubpixelLayout {
    fn from_glib(value: gdk_sys::GdkSubpixelLayout) -> Self {
        skip_assert_initialized!();
        match value {
            0 => SubpixelLayout::Unknown,
            1 => SubpixelLayout::None,
            2 => SubpixelLayout::HorizontalRgb,
            3 => SubpixelLayout::HorizontalBgr,
            4 => SubpixelLayout::VerticalRgb,
            5 => SubpixelLayout::VerticalBgr,
            value => SubpixelLayout::__Unknown(value),
        }
    }
}

impl StaticType for SubpixelLayout {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_subpixel_layout_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SubpixelLayout {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SubpixelLayout {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SubpixelLayout {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum SurfaceEdge {
    NorthWest,
    North,
    NorthEast,
    West,
    East,
    SouthWest,
    South,
    SouthEast,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SurfaceEdge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SurfaceEdge::{}",
            match *self {
                SurfaceEdge::NorthWest => "NorthWest",
                SurfaceEdge::North => "North",
                SurfaceEdge::NorthEast => "NorthEast",
                SurfaceEdge::West => "West",
                SurfaceEdge::East => "East",
                SurfaceEdge::SouthWest => "SouthWest",
                SurfaceEdge::South => "South",
                SurfaceEdge::SouthEast => "SouthEast",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SurfaceEdge {
    type GlibType = gdk_sys::GdkSurfaceEdge;

    fn to_glib(&self) -> gdk_sys::GdkSurfaceEdge {
        match *self {
            SurfaceEdge::NorthWest => gdk_sys::GDK_SURFACE_EDGE_NORTH_WEST,
            SurfaceEdge::North => gdk_sys::GDK_SURFACE_EDGE_NORTH,
            SurfaceEdge::NorthEast => gdk_sys::GDK_SURFACE_EDGE_NORTH_EAST,
            SurfaceEdge::West => gdk_sys::GDK_SURFACE_EDGE_WEST,
            SurfaceEdge::East => gdk_sys::GDK_SURFACE_EDGE_EAST,
            SurfaceEdge::SouthWest => gdk_sys::GDK_SURFACE_EDGE_SOUTH_WEST,
            SurfaceEdge::South => gdk_sys::GDK_SURFACE_EDGE_SOUTH,
            SurfaceEdge::SouthEast => gdk_sys::GDK_SURFACE_EDGE_SOUTH_EAST,
            SurfaceEdge::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkSurfaceEdge> for SurfaceEdge {
    fn from_glib(value: gdk_sys::GdkSurfaceEdge) -> Self {
        skip_assert_initialized!();
        match value {
            0 => SurfaceEdge::NorthWest,
            1 => SurfaceEdge::North,
            2 => SurfaceEdge::NorthEast,
            3 => SurfaceEdge::West,
            4 => SurfaceEdge::East,
            5 => SurfaceEdge::SouthWest,
            6 => SurfaceEdge::South,
            7 => SurfaceEdge::SouthEast,
            value => SurfaceEdge::__Unknown(value),
        }
    }
}

impl StaticType for SurfaceEdge {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_surface_edge_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SurfaceEdge {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SurfaceEdge {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SurfaceEdge {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum TouchpadGesturePhase {
    Begin,
    Update,
    End,
    Cancel,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TouchpadGesturePhase {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TouchpadGesturePhase::{}",
            match *self {
                TouchpadGesturePhase::Begin => "Begin",
                TouchpadGesturePhase::Update => "Update",
                TouchpadGesturePhase::End => "End",
                TouchpadGesturePhase::Cancel => "Cancel",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for TouchpadGesturePhase {
    type GlibType = gdk_sys::GdkTouchpadGesturePhase;

    fn to_glib(&self) -> gdk_sys::GdkTouchpadGesturePhase {
        match *self {
            TouchpadGesturePhase::Begin => gdk_sys::GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
            TouchpadGesturePhase::Update => gdk_sys::GDK_TOUCHPAD_GESTURE_PHASE_UPDATE,
            TouchpadGesturePhase::End => gdk_sys::GDK_TOUCHPAD_GESTURE_PHASE_END,
            TouchpadGesturePhase::Cancel => gdk_sys::GDK_TOUCHPAD_GESTURE_PHASE_CANCEL,
            TouchpadGesturePhase::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkTouchpadGesturePhase> for TouchpadGesturePhase {
    fn from_glib(value: gdk_sys::GdkTouchpadGesturePhase) -> Self {
        skip_assert_initialized!();
        match value {
            0 => TouchpadGesturePhase::Begin,
            1 => TouchpadGesturePhase::Update,
            2 => TouchpadGesturePhase::End,
            3 => TouchpadGesturePhase::Cancel,
            value => TouchpadGesturePhase::__Unknown(value),
        }
    }
}

impl StaticType for TouchpadGesturePhase {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_touchpad_gesture_phase_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for TouchpadGesturePhase {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for TouchpadGesturePhase {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for TouchpadGesturePhase {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum VulkanError {
    Unsupported,
    NotAvailable,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for VulkanError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "VulkanError::{}",
            match *self {
                VulkanError::Unsupported => "Unsupported",
                VulkanError::NotAvailable => "NotAvailable",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for VulkanError {
    type GlibType = gdk_sys::GdkVulkanError;

    fn to_glib(&self) -> gdk_sys::GdkVulkanError {
        match *self {
            VulkanError::Unsupported => gdk_sys::GDK_VULKAN_ERROR_UNSUPPORTED,
            VulkanError::NotAvailable => gdk_sys::GDK_VULKAN_ERROR_NOT_AVAILABLE,
            VulkanError::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<gdk_sys::GdkVulkanError> for VulkanError {
    fn from_glib(value: gdk_sys::GdkVulkanError) -> Self {
        skip_assert_initialized!();
        match value {
            0 => VulkanError::Unsupported,
            1 => VulkanError::NotAvailable,
            value => VulkanError::__Unknown(value),
        }
    }
}

impl ErrorDomain for VulkanError {
    fn domain() -> Quark {
        skip_assert_initialized!();
        unsafe { from_glib(gdk_sys::gdk_vulkan_error_quark()) }
    }

    fn code(self) -> i32 {
        self.to_glib()
    }

    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match code {
            0 => Some(VulkanError::Unsupported),
            1 => Some(VulkanError::NotAvailable),
            value => Some(VulkanError::__Unknown(value)),
        }
    }
}

impl StaticType for VulkanError {
    fn static_type() -> Type {
        unsafe { from_glib(gdk_sys::gdk_vulkan_error_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for VulkanError {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for VulkanError {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for VulkanError {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}
