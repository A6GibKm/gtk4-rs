// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk_sys;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use ContentFormats;
use Device;
use Display;
use Drag;
use DragAction;
use Surface;

glib_wrapper! {
    pub struct Drop(Object<gdk_sys::GdkDrop, DropClass>);

    match fn {
        get_type => || gdk_sys::gdk_drop_get_type(),
    }
}

impl Drop {
    pub fn finish(&self, action: DragAction) {
        unsafe {
            gdk_sys::gdk_drop_finish(self.to_glib_none().0, action.to_glib());
        }
    }

    pub fn get_actions(&self) -> DragAction {
        unsafe { from_glib(gdk_sys::gdk_drop_get_actions(self.to_glib_none().0)) }
    }

    pub fn get_device(&self) -> Option<Device> {
        unsafe { from_glib_none(gdk_sys::gdk_drop_get_device(self.to_glib_none().0)) }
    }

    pub fn get_display(&self) -> Option<Display> {
        unsafe { from_glib_none(gdk_sys::gdk_drop_get_display(self.to_glib_none().0)) }
    }

    pub fn get_drag(&self) -> Option<Drag> {
        unsafe { from_glib_none(gdk_sys::gdk_drop_get_drag(self.to_glib_none().0)) }
    }

    pub fn get_formats(&self) -> Option<ContentFormats> {
        unsafe { from_glib_none(gdk_sys::gdk_drop_get_formats(self.to_glib_none().0)) }
    }

    pub fn get_surface(&self) -> Option<Surface> {
        unsafe { from_glib_none(gdk_sys::gdk_drop_get_surface(self.to_glib_none().0)) }
    }

    //pub fn read_value_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<glib::Value, glib::Error>) + Send + 'static>(&self, type_: glib::types::Type, io_priority: /*Ignored*/glib::Priority, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call gdk_sys:gdk_drop_read_value_async() }
    //}

    //
    //pub fn read_value_async_future(&self, type_: glib::types::Type, io_priority: /*Ignored*/glib::Priority) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::Value, glib::Error>> + 'static>> {

    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.read_value_async(
    //        type_,
    //        io_priority,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    pub fn status(&self, actions: DragAction, preferred: DragAction) {
        unsafe {
            gdk_sys::gdk_drop_status(
                self.to_glib_none().0,
                actions.to_glib(),
                preferred.to_glib(),
            );
        }
    }

    pub fn connect_property_display_notify<F: Fn(&Drop) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_trampoline<F: Fn(&Drop) + 'static>(
            this: *mut gdk_sys::GdkDrop,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::display\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_display_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Drop {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Drop")
    }
}
