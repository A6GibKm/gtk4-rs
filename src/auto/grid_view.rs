// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Accessible;
use Buildable;
use ConstraintTarget;
use ListBase;
use ListItemFactory;
use Orientable;
use Scrollable;
use Widget;

glib_wrapper! {
    pub struct GridView(Object<gtk_sys::GtkGridView, gtk_sys::GtkGridViewClass, GridViewClass>) @extends ListBase, Widget, @implements Accessible, Buildable, ConstraintTarget, Orientable, Scrollable;

    match fn {
        get_type => || gtk_sys::gtk_grid_view_get_type(),
    }
}

impl GridView {
    pub fn new<P: IsA<gio::ListModel>>(model: Option<&P>) -> GridView {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_grid_view_new(
                model.map(|p| p.as_ref()).to_glib_full(),
            ))
            .unsafe_cast()
        }
    }

    pub fn with_factory<P: IsA<gio::ListModel>, Q: IsA<ListItemFactory>>(
        model: Option<&P>,
        factory: Option<&Q>,
    ) -> GridView {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_grid_view_new_with_factory(
                model.map(|p| p.as_ref()).to_glib_full(),
                factory.map(|p| p.as_ref()).to_glib_full(),
            ))
            .unsafe_cast()
        }
    }

    pub fn get_enable_rubberband(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_grid_view_get_enable_rubberband(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_factory(&self) -> Option<ListItemFactory> {
        unsafe { from_glib_none(gtk_sys::gtk_grid_view_get_factory(self.to_glib_none().0)) }
    }

    pub fn get_max_columns(&self) -> u32 {
        unsafe { gtk_sys::gtk_grid_view_get_max_columns(self.to_glib_none().0) }
    }

    pub fn get_min_columns(&self) -> u32 {
        unsafe { gtk_sys::gtk_grid_view_get_min_columns(self.to_glib_none().0) }
    }

    pub fn get_model(&self) -> Option<gio::ListModel> {
        unsafe { from_glib_none(gtk_sys::gtk_grid_view_get_model(self.to_glib_none().0)) }
    }

    pub fn get_single_click_activate(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_grid_view_get_single_click_activate(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn set_enable_rubberband(&self, enable_rubberband: bool) {
        unsafe {
            gtk_sys::gtk_grid_view_set_enable_rubberband(
                self.to_glib_none().0,
                enable_rubberband.to_glib(),
            );
        }
    }

    pub fn set_factory<P: IsA<ListItemFactory>>(&self, factory: Option<&P>) {
        unsafe {
            gtk_sys::gtk_grid_view_set_factory(
                self.to_glib_none().0,
                factory.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_max_columns(&self, max_columns: u32) {
        unsafe {
            gtk_sys::gtk_grid_view_set_max_columns(self.to_glib_none().0, max_columns);
        }
    }

    pub fn set_min_columns(&self, min_columns: u32) {
        unsafe {
            gtk_sys::gtk_grid_view_set_min_columns(self.to_glib_none().0, min_columns);
        }
    }

    pub fn set_model<P: IsA<gio::ListModel>>(&self, model: Option<&P>) {
        unsafe {
            gtk_sys::gtk_grid_view_set_model(
                self.to_glib_none().0,
                model.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_single_click_activate(&self, single_click_activate: bool) {
        unsafe {
            gtk_sys::gtk_grid_view_set_single_click_activate(
                self.to_glib_none().0,
                single_click_activate.to_glib(),
            );
        }
    }

    pub fn connect_activate<F: Fn(&GridView, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_trampoline<F: Fn(&GridView, u32) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            position: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), position)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    activate_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_enable_rubberband_notify<F: Fn(&GridView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_rubberband_trampoline<F: Fn(&GridView) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enable-rubberband\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_enable_rubberband_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_factory_notify<F: Fn(&GridView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_factory_trampoline<F: Fn(&GridView) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::factory\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_factory_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_max_columns_notify<F: Fn(&GridView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_columns_trampoline<F: Fn(&GridView) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::max-columns\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_max_columns_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_min_columns_notify<F: Fn(&GridView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_min_columns_trampoline<F: Fn(&GridView) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::min-columns\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_min_columns_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_model_notify<F: Fn(&GridView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<F: Fn(&GridView) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_model_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_single_click_activate_notify<F: Fn(&GridView) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_single_click_activate_trampoline<F: Fn(&GridView) + 'static>(
            this: *mut gtk_sys::GtkGridView,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::single-click-activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_single_click_activate_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for GridView {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GridView")
    }
}
