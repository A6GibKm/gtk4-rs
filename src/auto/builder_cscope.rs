// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use BuilderScope;

glib_wrapper! {
    pub struct BuilderCScope(Object<gtk_sys::GtkBuilderCScope, gtk_sys::GtkBuilderCScopeClass, BuilderCScopeClass>) @implements BuilderScope;

    match fn {
        get_type => || gtk_sys::gtk_builder_cscope_get_type(),
    }
}

impl BuilderCScope {
    pub fn new() -> Option<BuilderScope> {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(gtk_sys::gtk_builder_cscope_new()) }
    }
}

impl Default for BuilderCScope {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_BUILDER_CSCOPE: Option<&BuilderCScope> = None;

pub trait BuilderCScopeExt: 'static {
    //fn add_callback_symbol<P: FnOnce() + 'static>(&self, callback_name: &str, callback_symbol: P);

    //fn add_callback_symbols<P: FnOnce() + 'static>(&self, first_callback_name: &str, first_callback_symbol: P, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn lookup_callback_symbol(&self, callback_name: &str) -> Option<Box_<dyn Fn() + 'static>>;
}

impl<O: IsA<BuilderCScope>> BuilderCScopeExt for O {
    //fn add_callback_symbol<P: FnOnce() + 'static>(&self, callback_name: &str, callback_symbol: P) {
    //    unsafe { TODO: call gtk_sys:gtk_builder_cscope_add_callback_symbol() }
    //}

    //fn add_callback_symbols<P: FnOnce() + 'static>(&self, first_callback_name: &str, first_callback_symbol: P, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call gtk_sys:gtk_builder_cscope_add_callback_symbols() }
    //}

    //fn lookup_callback_symbol(&self, callback_name: &str) -> Option<Box_<dyn Fn() + 'static>> {
    //    unsafe { TODO: call gtk_sys:gtk_builder_cscope_lookup_callback_symbol() }
    //}
}

impl fmt::Display for BuilderCScope {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "BuilderCScope")
    }
}
