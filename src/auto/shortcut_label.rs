// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Box;
use Buildable;
use Container;
use Orientable;
use Widget;
use ffi;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ShortcutLabel(Object<ffi::GtkShortcutLabel, ffi::GtkShortcutLabelClass, ShortcutLabelClass>) @extends Box, Container, Widget, @implements Buildable, Orientable;

    match fn {
        get_type => || ffi::gtk_shortcut_label_get_type(),
    }
}

impl ShortcutLabel {
    pub fn new(accelerator: &str) -> ShortcutLabel {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_full(ffi::gtk_shortcut_label_new(accelerator.to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_SHORTCUT_LABEL: Option<&ShortcutLabel> = None;

pub trait ShortcutLabelExt: 'static {
    fn get_accelerator(&self) -> Option<GString>;

    fn get_disabled_text(&self) -> Option<GString>;

    fn set_accelerator(&self, accelerator: &str);

    fn set_disabled_text(&self, disabled_text: &str);

    fn connect_property_accelerator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_disabled_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ShortcutLabel>> ShortcutLabelExt for O {
    fn get_accelerator(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gtk_shortcut_label_get_accelerator(self.as_ref().to_glib_none().0))
        }
    }

    fn get_disabled_text(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gtk_shortcut_label_get_disabled_text(self.as_ref().to_glib_none().0))
        }
    }

    fn set_accelerator(&self, accelerator: &str) {
        unsafe {
            ffi::gtk_shortcut_label_set_accelerator(self.as_ref().to_glib_none().0, accelerator.to_glib_none().0);
        }
    }

    fn set_disabled_text(&self, disabled_text: &str) {
        unsafe {
            ffi::gtk_shortcut_label_set_disabled_text(self.as_ref().to_glib_none().0, disabled_text.to_glib_none().0);
        }
    }

    fn connect_property_accelerator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::accelerator\0".as_ptr() as *const _,
                Some(transmute(notify_accelerator_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_disabled_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::disabled-text\0".as_ptr() as *const _,
                Some(transmute(notify_disabled_text_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_accelerator_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkShortcutLabel, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ShortcutLabel> {
    let f: &F = &*(f as *const F);
    f(&ShortcutLabel::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_disabled_text_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkShortcutLabel, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ShortcutLabel> {
    let f: &F = &*(f as *const F);
    f(&ShortcutLabel::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for ShortcutLabel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ShortcutLabel")
    }
}
