// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EventController;
use Gesture;
use GestureSingle;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct GestureMultiPress(Object<ffi::GtkGestureMultiPress, ffi::GtkGestureMultiPressClass, GestureMultiPressClass>) @extends GestureSingle, Gesture, EventController;

    match fn {
        get_type => || ffi::gtk_gesture_multi_press_get_type(),
    }
}

impl GestureMultiPress {
    pub fn new() -> GestureMultiPress {
        assert_initialized_main_thread!();
        unsafe {
            Gesture::from_glib_full(ffi::gtk_gesture_multi_press_new()).unsafe_cast()
        }
    }
}

impl Default for GestureMultiPress {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_GESTURE_MULTI_PRESS: Option<&GestureMultiPress> = None;

pub trait GestureMultiPressExt: 'static {
    //fn get_area(&self, rect: /*Ignored*/gdk::Rectangle) -> bool;

    //fn set_area(&self, rect: /*Ignored*/Option<&gdk::Rectangle>);

    fn connect_pressed<F: Fn(&Self, i32, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_released<F: Fn(&Self, i32, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_stopped<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //fn connect_unpaired_release<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<GestureMultiPress>> GestureMultiPressExt for O {
    //fn get_area(&self, rect: /*Ignored*/gdk::Rectangle) -> bool {
    //    unsafe { TODO: call ffi::gtk_gesture_multi_press_get_area() }
    //}

    //fn set_area(&self, rect: /*Ignored*/Option<&gdk::Rectangle>) {
    //    unsafe { TODO: call ffi::gtk_gesture_multi_press_set_area() }
    //}

    fn connect_pressed<F: Fn(&Self, i32, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"pressed\0".as_ptr() as *const _,
                Some(transmute(pressed_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_released<F: Fn(&Self, i32, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"released\0".as_ptr() as *const _,
                Some(transmute(released_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_stopped<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"stopped\0".as_ptr() as *const _,
                Some(transmute(stopped_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    //fn connect_unpaired_release<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored sequence: Gdk.EventSequence
    //}
}

unsafe extern "C" fn pressed_trampoline<P, F: Fn(&P, i32, f64, f64) + 'static>(this: *mut ffi::GtkGestureMultiPress, n_press: libc::c_int, x: libc::c_double, y: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GestureMultiPress> {
    let f: &F = &*(f as *const F);
    f(&GestureMultiPress::from_glib_borrow(this).unsafe_cast(), n_press, x, y)
}

unsafe extern "C" fn released_trampoline<P, F: Fn(&P, i32, f64, f64) + 'static>(this: *mut ffi::GtkGestureMultiPress, n_press: libc::c_int, x: libc::c_double, y: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GestureMultiPress> {
    let f: &F = &*(f as *const F);
    f(&GestureMultiPress::from_glib_borrow(this).unsafe_cast(), n_press, x, y)
}

unsafe extern "C" fn stopped_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkGestureMultiPress, f: glib_ffi::gpointer)
where P: IsA<GestureMultiPress> {
    let f: &F = &*(f as *const F);
    f(&GestureMultiPress::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for GestureMultiPress {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GestureMultiPress")
    }
}
