// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use DrawContext;
use ffi;
use glib::object::ObjectType;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct VulkanContext(Object<ffi::GdkVulkanContext, VulkanContextClass>) @extends DrawContext;

    match fn {
        get_type => || ffi::gdk_vulkan_context_get_type(),
    }
}

impl VulkanContext {
    pub fn connect_images_updated<F: Fn(&VulkanContext) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"images-updated\0".as_ptr() as *const _,
                Some(transmute(images_updated_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn images_updated_trampoline<F: Fn(&VulkanContext) + 'static>(this: *mut ffi::GdkVulkanContext, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

impl fmt::Display for VulkanContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "VulkanContext")
    }
}
