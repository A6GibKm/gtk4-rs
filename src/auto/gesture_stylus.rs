// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EventController;
use Gesture;
use GestureSingle;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct GestureStylus(Object<ffi::GtkGestureStylus, ffi::GtkGestureStylusClass, GestureStylusClass>) @extends GestureSingle, Gesture, EventController;

    match fn {
        get_type => || ffi::gtk_gesture_stylus_get_type(),
    }
}

impl GestureStylus {
    pub fn new() -> GestureStylus {
        assert_initialized_main_thread!();
        unsafe {
            Gesture::from_glib_full(ffi::gtk_gesture_stylus_new()).unsafe_cast()
        }
    }
}

impl Default for GestureStylus {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_GESTURE_STYLUS: Option<&GestureStylus> = None;

pub trait GestureStylusExt: 'static {
    //fn get_axes(&self, axes: /*Unimplemented*/&CArray TypeId { ns_id: 10, id: 5 }, values: Vec<f64>) -> bool;

    //fn get_axis(&self, axis: /*Ignored*/gdk::AxisUse) -> Option<f64>;

    //fn get_backlog(&self, backlog: /*Ignored*/Vec<gdk::TimeCoord>) -> Option<u32>;

    //fn get_device_tool(&self) -> /*Ignored*/Option<gdk::DeviceTool>;

    fn connect_down<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_motion<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_proximity<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_up<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<GestureStylus>> GestureStylusExt for O {
    //fn get_axes(&self, axes: /*Unimplemented*/&CArray TypeId { ns_id: 10, id: 5 }, values: Vec<f64>) -> bool {
    //    unsafe { TODO: call ffi::gtk_gesture_stylus_get_axes() }
    //}

    //fn get_axis(&self, axis: /*Ignored*/gdk::AxisUse) -> Option<f64> {
    //    unsafe { TODO: call ffi::gtk_gesture_stylus_get_axis() }
    //}

    //fn get_backlog(&self, backlog: /*Ignored*/Vec<gdk::TimeCoord>) -> Option<u32> {
    //    unsafe { TODO: call ffi::gtk_gesture_stylus_get_backlog() }
    //}

    //fn get_device_tool(&self) -> /*Ignored*/Option<gdk::DeviceTool> {
    //    unsafe { TODO: call ffi::gtk_gesture_stylus_get_device_tool() }
    //}

    fn connect_down<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"down\0".as_ptr() as *const _,
                Some(transmute(down_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_motion<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"motion\0".as_ptr() as *const _,
                Some(transmute(motion_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_proximity<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"proximity\0".as_ptr() as *const _,
                Some(transmute(proximity_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_up<F: Fn(&Self, f64, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"up\0".as_ptr() as *const _,
                Some(transmute(up_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn down_trampoline<P, F: Fn(&P, f64, f64) + 'static>(this: *mut ffi::GtkGestureStylus, object: libc::c_double, p0: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GestureStylus> {
    let f: &F = &*(f as *const F);
    f(&GestureStylus::from_glib_borrow(this).unsafe_cast(), object, p0)
}

unsafe extern "C" fn motion_trampoline<P, F: Fn(&P, f64, f64) + 'static>(this: *mut ffi::GtkGestureStylus, object: libc::c_double, p0: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GestureStylus> {
    let f: &F = &*(f as *const F);
    f(&GestureStylus::from_glib_borrow(this).unsafe_cast(), object, p0)
}

unsafe extern "C" fn proximity_trampoline<P, F: Fn(&P, f64, f64) + 'static>(this: *mut ffi::GtkGestureStylus, object: libc::c_double, p0: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GestureStylus> {
    let f: &F = &*(f as *const F);
    f(&GestureStylus::from_glib_borrow(this).unsafe_cast(), object, p0)
}

unsafe extern "C" fn up_trampoline<P, F: Fn(&P, f64, f64) + 'static>(this: *mut ffi::GtkGestureStylus, object: libc::c_double, p0: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GestureStylus> {
    let f: &F = &*(f as *const F);
    f(&GestureStylus::from_glib_borrow(this).unsafe_cast(), object, p0)
}

impl fmt::Display for GestureStylus {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GestureStylus")
    }
}
