// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Box;
use Buildable;
use Container;
use Orientable;
use Stack;
use Widget;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct StackSwitcher(Object<gtk_sys::GtkStackSwitcher, gtk_sys::GtkStackSwitcherClass, StackSwitcherClass>) @extends Box, Container, Widget, @implements Buildable, Orientable;

    match fn {
        get_type => || gtk_sys::gtk_stack_switcher_get_type(),
    }
}

impl StackSwitcher {
    pub fn new() -> StackSwitcher {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_stack_switcher_new()).unsafe_cast()
        }
    }
}

impl Default for StackSwitcher {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_STACK_SWITCHER: Option<&StackSwitcher> = None;

pub trait StackSwitcherExt: 'static {
    fn get_stack(&self) -> Option<Stack>;

    fn set_stack<P: IsA<Stack>>(&self, stack: Option<&P>);

    fn connect_property_stack_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StackSwitcher>> StackSwitcherExt for O {
    fn get_stack(&self) -> Option<Stack> {
        unsafe {
            from_glib_none(gtk_sys::gtk_stack_switcher_get_stack(self.as_ref().to_glib_none().0))
        }
    }

    fn set_stack<P: IsA<Stack>>(&self, stack: Option<&P>) {
        unsafe {
            gtk_sys::gtk_stack_switcher_set_stack(self.as_ref().to_glib_none().0, stack.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    fn connect_property_stack_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::stack\0".as_ptr() as *const _,
                Some(transmute(notify_stack_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_stack_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStackSwitcher, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<StackSwitcher> {
    let f: &F = &*(f as *const F);
    f(&StackSwitcher::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for StackSwitcher {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StackSwitcher")
    }
}
