// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Expression;
use Filter;
use StringFilterMatchMode;

glib_wrapper! {
    pub struct StringFilter(Object<gtk_sys::GtkStringFilter, gtk_sys::GtkStringFilterClass, StringFilterClass>) @extends Filter;

    match fn {
        get_type => || gtk_sys::gtk_string_filter_get_type(),
    }
}

impl StringFilter {
    pub fn new<P: IsA<Expression>>(expression: Option<&P>) -> StringFilter {
        assert_initialized_main_thread!();
        unsafe {
            Filter::from_glib_full(gtk_sys::gtk_string_filter_new(
                expression.map(|p| p.as_ref()).to_glib_full(),
            ))
            .unsafe_cast()
        }
    }
}

pub const NONE_STRING_FILTER: Option<&StringFilter> = None;

pub trait StringFilterExt: 'static {
    fn get_expression(&self) -> Option<Expression>;

    fn get_ignore_case(&self) -> bool;

    fn get_match_mode(&self) -> StringFilterMatchMode;

    fn get_search(&self) -> Option<GString>;

    fn set_expression<P: IsA<Expression>>(&self, expression: &P);

    fn set_ignore_case(&self, ignore_case: bool);

    fn set_match_mode(&self, mode: StringFilterMatchMode);

    fn set_search(&self, search: Option<&str>);

    fn connect_property_expression_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ignore_case_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_match_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StringFilter>> StringFilterExt for O {
    fn get_expression(&self) -> Option<Expression> {
        unsafe {
            from_glib_none(gtk_sys::gtk_string_filter_get_expression(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_ignore_case(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_string_filter_get_ignore_case(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_match_mode(&self) -> StringFilterMatchMode {
        unsafe {
            from_glib(gtk_sys::gtk_string_filter_get_match_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_search(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_string_filter_get_search(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_expression<P: IsA<Expression>>(&self, expression: &P) {
        unsafe {
            gtk_sys::gtk_string_filter_set_expression(
                self.as_ref().to_glib_none().0,
                expression.as_ref().to_glib_none().0,
            );
        }
    }

    fn set_ignore_case(&self, ignore_case: bool) {
        unsafe {
            gtk_sys::gtk_string_filter_set_ignore_case(
                self.as_ref().to_glib_none().0,
                ignore_case.to_glib(),
            );
        }
    }

    fn set_match_mode(&self, mode: StringFilterMatchMode) {
        unsafe {
            gtk_sys::gtk_string_filter_set_match_mode(
                self.as_ref().to_glib_none().0,
                mode.to_glib(),
            );
        }
    }

    fn set_search(&self, search: Option<&str>) {
        unsafe {
            gtk_sys::gtk_string_filter_set_search(
                self.as_ref().to_glib_none().0,
                search.to_glib_none().0,
            );
        }
    }

    fn connect_property_expression_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_expression_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkStringFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<StringFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&StringFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::expression\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_expression_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_ignore_case_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ignore_case_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkStringFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<StringFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&StringFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ignore-case\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ignore_case_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_match_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_match_mode_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkStringFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<StringFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&StringFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::match-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_match_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_search_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkStringFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<StringFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&StringFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::search\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_search_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for StringFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StringFilter")
    }
}
