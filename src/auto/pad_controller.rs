// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EventController;
use PadActionType;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct PadController(Object<ffi::GtkPadController, ffi::GtkPadControllerClass, PadControllerClass>) @extends EventController;

    match fn {
        get_type => || ffi::gtk_pad_controller_get_type(),
    }
}

impl PadController {
    //pub fn new(group: /*Ignored*/&gio::ActionGroup, pad: /*Ignored*/Option<&gdk::Device>) -> PadController {
    //    unsafe { TODO: call ffi::gtk_pad_controller_new() }
    //}
}

pub const NONE_PAD_CONTROLLER: Option<&PadController> = None;

pub trait PadControllerExt: 'static {
    fn set_action(&self, type_: PadActionType, index: i32, mode: i32, label: &str, action_name: &str);

    //fn set_action_entries(&self, entries: /*Ignored*/&[&PadActionEntry]);

    //fn get_property_action_group(&self) -> /*Ignored*/Option<gio::ActionGroup>;

    //fn get_property_pad(&self) -> /*Ignored*/Option<gdk::Device>;
}

impl<O: IsA<PadController>> PadControllerExt for O {
    fn set_action(&self, type_: PadActionType, index: i32, mode: i32, label: &str, action_name: &str) {
        unsafe {
            ffi::gtk_pad_controller_set_action(self.as_ref().to_glib_none().0, type_.to_glib(), index, mode, label.to_glib_none().0, action_name.to_glib_none().0);
        }
    }

    //fn set_action_entries(&self, entries: /*Ignored*/&[&PadActionEntry]) {
    //    unsafe { TODO: call ffi::gtk_pad_controller_set_action_entries() }
    //}

    //fn get_property_action_group(&self) -> /*Ignored*/Option<gio::ActionGroup> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"action-group\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get()
    //    }
    //}

    //fn get_property_pad(&self) -> /*Ignored*/Option<gdk::Device> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"pad\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get()
    //    }
    //}
}

impl fmt::Display for PadController {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PadController")
    }
}
