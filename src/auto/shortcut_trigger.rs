// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gdk;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct ShortcutTrigger(Object<gtk_sys::GtkShortcutTrigger, gtk_sys::GtkShortcutTriggerClass, ShortcutTriggerClass>);

    match fn {
        get_type => || gtk_sys::gtk_shortcut_trigger_get_type(),
    }
}

impl ShortcutTrigger {
    pub fn parse_string(string: &str) -> Option<ShortcutTrigger> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gtk_sys::gtk_shortcut_trigger_parse_string(
                string.to_glib_none().0,
            ))
        }
    }
}

pub const NONE_SHORTCUT_TRIGGER: Option<&ShortcutTrigger> = None;

pub trait ShortcutTriggerExt: 'static {
    fn compare<P: IsA<ShortcutTrigger>>(&self, trigger2: &P) -> i32;

    fn equal<P: IsA<ShortcutTrigger>>(&self, trigger2: &P) -> bool;

    fn hash(&self) -> u32;

    fn print(&self, string: &mut glib::String);

    fn print_label(&self, display: &gdk::Display, string: &mut glib::String) -> bool;

    fn to_label(&self, display: &gdk::Display) -> Option<GString>;

    fn to_string(&self) -> GString;

    //fn trigger<P: IsA<gdk::Event>>(&self, event: &P, enable_mnemonics: bool) -> /*Ignored*/gdk::KeyMatch;
}

impl<O: IsA<ShortcutTrigger>> ShortcutTriggerExt for O {
    fn compare<P: IsA<ShortcutTrigger>>(&self, trigger2: &P) -> i32 {
        unsafe {
            gtk_sys::gtk_shortcut_trigger_compare(
                ToGlibPtr::<*mut gtk_sys::GtkShortcutTrigger>::to_glib_none(self).0
                    as glib_sys::gconstpointer,
                ToGlibPtr::<*mut gtk_sys::GtkShortcutTrigger>::to_glib_none(trigger2.as_ref()).0
                    as glib_sys::gconstpointer,
            )
        }
    }

    fn equal<P: IsA<ShortcutTrigger>>(&self, trigger2: &P) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_shortcut_trigger_equal(
                ToGlibPtr::<*mut gtk_sys::GtkShortcutTrigger>::to_glib_none(self).0
                    as glib_sys::gconstpointer,
                ToGlibPtr::<*mut gtk_sys::GtkShortcutTrigger>::to_glib_none(trigger2.as_ref()).0
                    as glib_sys::gconstpointer,
            ))
        }
    }

    fn hash(&self) -> u32 {
        unsafe {
            gtk_sys::gtk_shortcut_trigger_hash(
                ToGlibPtr::<*mut gtk_sys::GtkShortcutTrigger>::to_glib_none(self).0
                    as glib_sys::gconstpointer,
            )
        }
    }

    fn print(&self, string: &mut glib::String) {
        unsafe {
            gtk_sys::gtk_shortcut_trigger_print(
                self.as_ref().to_glib_none().0,
                string.to_glib_none_mut().0,
            );
        }
    }

    fn print_label(&self, display: &gdk::Display, string: &mut glib::String) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_shortcut_trigger_print_label(
                self.as_ref().to_glib_none().0,
                display.to_glib_none().0,
                string.to_glib_none_mut().0,
            ))
        }
    }

    fn to_label(&self, display: &gdk::Display) -> Option<GString> {
        unsafe {
            from_glib_full(gtk_sys::gtk_shortcut_trigger_to_label(
                self.as_ref().to_glib_none().0,
                display.to_glib_none().0,
            ))
        }
    }

    fn to_string(&self) -> GString {
        unsafe {
            from_glib_full(gtk_sys::gtk_shortcut_trigger_to_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn trigger<P: IsA<gdk::Event>>(&self, event: &P, enable_mnemonics: bool) -> /*Ignored*/gdk::KeyMatch {
    //    unsafe { TODO: call gtk_sys:gtk_shortcut_trigger_trigger() }
    //}
}

impl fmt::Display for ShortcutTrigger {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ShortcutTrigger")
    }
}
