// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use AppLaunchContext;
use Clipboard;
use Device;
use Event;
use Keymap;
use Monitor;
use Seat;
use Surface;
use ffi;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::IsA;
use glib::object::ObjectType;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Display(Object<ffi::GdkDisplay, DisplayClass>);

    match fn {
        get_type => || ffi::gdk_display_get_type(),
    }
}

impl Display {
    pub fn beep(&self) {
        unsafe {
            ffi::gdk_display_beep(self.to_glib_none().0);
        }
    }

    pub fn close(&self) {
        unsafe {
            ffi::gdk_display_close(self.to_glib_none().0);
        }
    }

    pub fn device_is_grabbed(&self, device: &Device) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_device_is_grabbed(self.to_glib_none().0, device.to_glib_none().0))
        }
    }

    pub fn flush(&self) {
        unsafe {
            ffi::gdk_display_flush(self.to_glib_none().0);
        }
    }

    pub fn get_app_launch_context(&self) -> Option<AppLaunchContext> {
        unsafe {
            from_glib_full(ffi::gdk_display_get_app_launch_context(self.to_glib_none().0))
        }
    }

    pub fn get_clipboard(&self) -> Option<Clipboard> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_clipboard(self.to_glib_none().0))
        }
    }

    pub fn get_default_group(&self) -> Option<Surface> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_default_group(self.to_glib_none().0))
        }
    }

    pub fn get_default_seat(&self) -> Option<Seat> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_default_seat(self.to_glib_none().0))
        }
    }

    pub fn get_event(&self) -> Option<Event> {
        unsafe {
            from_glib_full(ffi::gdk_display_get_event(self.to_glib_none().0))
        }
    }

    pub fn get_keymap(&self) -> Option<Keymap> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_keymap(self.to_glib_none().0))
        }
    }

    pub fn get_monitor(&self, monitor_num: i32) -> Option<Monitor> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_monitor(self.to_glib_none().0, monitor_num))
        }
    }

    pub fn get_monitor_at_point(&self, x: i32, y: i32) -> Option<Monitor> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_monitor_at_point(self.to_glib_none().0, x, y))
        }
    }

    pub fn get_monitor_at_surface<P: IsA<Surface>>(&self, surface: &P) -> Option<Monitor> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_monitor_at_surface(self.to_glib_none().0, surface.as_ref().to_glib_none().0))
        }
    }

    pub fn get_n_monitors(&self) -> i32 {
        unsafe {
            ffi::gdk_display_get_n_monitors(self.to_glib_none().0)
        }
    }

    pub fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_name(self.to_glib_none().0))
        }
    }

    pub fn get_primary_clipboard(&self) -> Option<Clipboard> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_primary_clipboard(self.to_glib_none().0))
        }
    }

    pub fn get_primary_monitor(&self) -> Option<Monitor> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_primary_monitor(self.to_glib_none().0))
        }
    }

    //pub fn get_setting(&self, name: &str, value: /*Ignored*/&mut glib::Value) -> bool {
    //    unsafe { TODO: call ffi::gdk_display_get_setting() }
    //}

    pub fn get_startup_notification_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gdk_display_get_startup_notification_id(self.to_glib_none().0))
        }
    }

    pub fn has_pending(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_has_pending(self.to_glib_none().0))
        }
    }

    pub fn is_closed(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_is_closed(self.to_glib_none().0))
        }
    }

    pub fn is_composited(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_is_composited(self.to_glib_none().0))
        }
    }

    pub fn is_rgba(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_is_rgba(self.to_glib_none().0))
        }
    }

    pub fn list_seats(&self) -> Vec<Seat> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gdk_display_list_seats(self.to_glib_none().0))
        }
    }

    pub fn notify_startup_complete(&self, startup_id: &str) {
        unsafe {
            ffi::gdk_display_notify_startup_complete(self.to_glib_none().0, startup_id.to_glib_none().0);
        }
    }

    pub fn peek_event(&self) -> Option<Event> {
        unsafe {
            from_glib_full(ffi::gdk_display_peek_event(self.to_glib_none().0))
        }
    }

    pub fn put_event(&self, event: &Event) {
        unsafe {
            ffi::gdk_display_put_event(self.to_glib_none().0, event.to_glib_none().0);
        }
    }

    pub fn supports_input_shapes(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_supports_input_shapes(self.to_glib_none().0))
        }
    }

    pub fn supports_shapes(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_display_supports_shapes(self.to_glib_none().0))
        }
    }

    pub fn sync(&self) {
        unsafe {
            ffi::gdk_display_sync(self.to_glib_none().0);
        }
    }

    pub fn get_property_composited(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"composited\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn get_property_rgba(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.as_ptr() as *mut gobject_ffi::GObject, b"rgba\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    pub fn get_default() -> Option<Display> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_display_get_default())
        }
    }

    pub fn open(display_name: &str) -> Option<Display> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_display_open(display_name.to_glib_none().0))
        }
    }

    pub fn connect_closed<F: Fn(&Display, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"closed\0".as_ptr() as *const _,
                Some(transmute(closed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_monitor_added<F: Fn(&Display, &Monitor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitor-added\0".as_ptr() as *const _,
                Some(transmute(monitor_added_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_monitor_removed<F: Fn(&Display, &Monitor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitor-removed\0".as_ptr() as *const _,
                Some(transmute(monitor_removed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_opened<F: Fn(&Display) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"opened\0".as_ptr() as *const _,
                Some(transmute(opened_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_seat_added<F: Fn(&Display, &Seat) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"seat-added\0".as_ptr() as *const _,
                Some(transmute(seat_added_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_seat_removed<F: Fn(&Display, &Seat) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"seat-removed\0".as_ptr() as *const _,
                Some(transmute(seat_removed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_setting_changed<F: Fn(&Display, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"setting-changed\0".as_ptr() as *const _,
                Some(transmute(setting_changed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_composited_notify<F: Fn(&Display) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::composited\0".as_ptr() as *const _,
                Some(transmute(notify_composited_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }

    pub fn connect_property_rgba_notify<F: Fn(&Display) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rgba\0".as_ptr() as *const _,
                Some(transmute(notify_rgba_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn closed_trampoline<F: Fn(&Display, bool) + 'static>(this: *mut ffi::GdkDisplay, is_error: glib_ffi::gboolean, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), from_glib(is_error))
}

unsafe extern "C" fn monitor_added_trampoline<F: Fn(&Display, &Monitor) + 'static>(this: *mut ffi::GdkDisplay, monitor: *mut ffi::GdkMonitor, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), &from_glib_borrow(monitor))
}

unsafe extern "C" fn monitor_removed_trampoline<F: Fn(&Display, &Monitor) + 'static>(this: *mut ffi::GdkDisplay, monitor: *mut ffi::GdkMonitor, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), &from_glib_borrow(monitor))
}

unsafe extern "C" fn opened_trampoline<F: Fn(&Display) + 'static>(this: *mut ffi::GdkDisplay, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn seat_added_trampoline<F: Fn(&Display, &Seat) + 'static>(this: *mut ffi::GdkDisplay, seat: *mut ffi::GdkSeat, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), &from_glib_borrow(seat))
}

unsafe extern "C" fn seat_removed_trampoline<F: Fn(&Display, &Seat) + 'static>(this: *mut ffi::GdkDisplay, seat: *mut ffi::GdkSeat, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), &from_glib_borrow(seat))
}

unsafe extern "C" fn setting_changed_trampoline<F: Fn(&Display, &str) + 'static>(this: *mut ffi::GdkDisplay, setting: *mut libc::c_char, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this), &GString::from_glib_borrow(setting))
}

unsafe extern "C" fn notify_composited_trampoline<F: Fn(&Display) + 'static>(this: *mut ffi::GdkDisplay, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_rgba_trampoline<F: Fn(&Display) + 'static>(this: *mut ffi::GdkDisplay, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer) {
    let f: &F = &*(f as *const F);
    f(&from_glib_borrow(this))
}

impl fmt::Display for Display {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Display")
    }
}
