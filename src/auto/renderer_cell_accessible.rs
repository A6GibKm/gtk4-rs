// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Accessible;
use CellAccessible;
use CellRenderer;
use ffi;
use glib::StaticType;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use std::fmt;

glib_wrapper! {
    pub struct RendererCellAccessible(Object<ffi::GtkRendererCellAccessible, ffi::GtkRendererCellAccessibleClass, RendererCellAccessibleClass>) @extends CellAccessible, Accessible;

    match fn {
        get_type => || ffi::gtk_renderer_cell_accessible_get_type(),
    }
}

impl RendererCellAccessible {
    //pub fn new<P: IsA<CellRenderer>>(renderer: &P) -> RendererCellAccessible {
    //    unsafe { TODO: call ffi::gtk_renderer_cell_accessible_new() }
    //}
}

pub const NONE_RENDERER_CELL_ACCESSIBLE: Option<&RendererCellAccessible> = None;

pub trait RendererCellAccessibleExt: 'static {
    fn get_property_renderer(&self) -> Option<CellRenderer>;
}

impl<O: IsA<RendererCellAccessible>> RendererCellAccessibleExt for O {
    fn get_property_renderer(&self) -> Option<CellRenderer> {
        unsafe {
            let mut value = Value::from_type(<CellRenderer as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"renderer\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }
}

impl fmt::Display for RendererCellAccessible {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RendererCellAccessible")
    }
}
