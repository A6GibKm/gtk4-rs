// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use cairo;
use glib;
use glib::translate::*;
use graphene;
use gsk_sys;
use std::ptr;
use RenderNodeType;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct RenderNode(Shared<gsk_sys::GskRenderNode>);

    match fn {
        ref => |ptr| gsk_sys::gsk_render_node_ref(ptr),
        unref => |ptr| gsk_sys::gsk_render_node_unref(ptr),
        get_type => || gsk_sys::gsk_render_node_get_type(),
    }
}

impl RenderNode {
    pub fn draw(&self, cr: &cairo::Context) {
        unsafe {
            gsk_sys::gsk_render_node_draw(self.to_glib_none().0, mut_override(cr.to_glib_none().0));
        }
    }

    pub fn get_bounds(&self) -> graphene::Rect {
        unsafe {
            let mut bounds = graphene::Rect::uninitialized();
            gsk_sys::gsk_render_node_get_bounds(self.to_glib_none().0, bounds.to_glib_none_mut().0);
            bounds
        }
    }

    pub fn get_node_type(&self) -> RenderNodeType {
        unsafe {
            from_glib(gsk_sys::gsk_render_node_get_node_type(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn serialize(&self) -> Option<glib::Bytes> {
        unsafe { from_glib_full(gsk_sys::gsk_render_node_serialize(self.to_glib_none().0)) }
    }

    pub fn write_to_file(&self, filename: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gsk_sys::gsk_render_node_write_to_file(
                self.to_glib_none().0,
                filename.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //pub fn deserialize(bytes: &glib::Bytes, error_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer, &glib::Error), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> Option<RenderNode> {
    //    unsafe { TODO: call gsk_sys:gsk_render_node_deserialize() }
    //}
}
