// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use RenderNodeType;
use ffi;
use glib::translate::*;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct RenderNode(Shared<ffi::GskRenderNode>);

    match fn {
        ref => |ptr| ffi::gsk_render_node_ref(ptr),
        unref => |ptr| ffi::gsk_render_node_unref(ptr),
        get_type => || ffi::gsk_render_node_get_type(),
    }
}

impl RenderNode {
    //pub fn draw(&self, cr: /*Ignored*/&mut cairo::Context) {
    //    unsafe { TODO: call ffi::gsk_render_node_draw() }
    //}

    //pub fn get_bounds(&self, bounds: /*Ignored*/graphene::Rect) {
    //    unsafe { TODO: call ffi::gsk_render_node_get_bounds() }
    //}

    pub fn get_node_type(&self) -> RenderNodeType {
        unsafe {
            from_glib(ffi::gsk_render_node_get_node_type(self.to_glib_none().0))
        }
    }

    //pub fn serialize(&self) -> /*Ignored*/Option<glib::Bytes> {
    //    unsafe { TODO: call ffi::gsk_render_node_serialize() }
    //}

    //pub fn write_to_file(&self, filename: &str, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::gsk_render_node_write_to_file() }
    //}

    //pub fn deserialize(bytes: /*Ignored*/&glib::Bytes, error_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer, /*Ignored*/Error), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> Option<RenderNode> {
    //    unsafe { TODO: call ffi::gsk_render_node_deserialize() }
    //}
}
