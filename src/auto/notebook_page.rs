// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Widget;
use ffi;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct NotebookPage(Object<ffi::GtkNotebookPage, ffi::GtkNotebookPageClass, NotebookPageClass>);

    match fn {
        get_type => || ffi::gtk_notebook_page_get_type(),
    }
}

pub const NONE_NOTEBOOK_PAGE: Option<&NotebookPage> = None;

pub trait NotebookPageExt: 'static {
    fn get_child(&self) -> Option<Widget>;

    fn get_property_detachable(&self) -> bool;

    fn set_property_detachable(&self, detachable: bool);

    fn get_property_menu(&self) -> Option<Widget>;

    fn get_property_menu_label(&self) -> Option<GString>;

    fn set_property_menu_label(&self, menu_label: Option<&str>);

    fn get_property_position(&self) -> i32;

    fn set_property_position(&self, position: i32);

    fn get_property_reorderable(&self) -> bool;

    fn set_property_reorderable(&self, reorderable: bool);

    fn get_property_tab(&self) -> Option<Widget>;

    fn get_property_tab_expand(&self) -> bool;

    fn set_property_tab_expand(&self, tab_expand: bool);

    fn get_property_tab_fill(&self) -> bool;

    fn set_property_tab_fill(&self, tab_fill: bool);

    fn get_property_tab_label(&self) -> Option<GString>;

    fn set_property_tab_label(&self, tab_label: Option<&str>);

    fn connect_property_detachable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_menu_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_position_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_reorderable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tab_expand_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tab_fill_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tab_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<NotebookPage>> NotebookPageExt for O {
    fn get_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_notebook_page_get_child(self.as_ref().to_glib_none().0))
        }
    }

    fn get_property_detachable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"detachable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_detachable(&self, detachable: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"detachable\0".as_ptr() as *const _, Value::from(&detachable).to_glib_none().0);
        }
    }

    fn get_property_menu(&self) -> Option<Widget> {
        unsafe {
            let mut value = Value::from_type(<Widget as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"menu\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_menu_label(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"menu-label\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_menu_label(&self, menu_label: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"menu-label\0".as_ptr() as *const _, Value::from(menu_label).to_glib_none().0);
        }
    }

    fn get_property_position(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"position\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_position(&self, position: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"position\0".as_ptr() as *const _, Value::from(&position).to_glib_none().0);
        }
    }

    fn get_property_reorderable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"reorderable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_reorderable(&self, reorderable: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"reorderable\0".as_ptr() as *const _, Value::from(&reorderable).to_glib_none().0);
        }
    }

    fn get_property_tab(&self) -> Option<Widget> {
        unsafe {
            let mut value = Value::from_type(<Widget as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_tab_expand(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab-expand\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_tab_expand(&self, tab_expand: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab-expand\0".as_ptr() as *const _, Value::from(&tab_expand).to_glib_none().0);
        }
    }

    fn get_property_tab_fill(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab-fill\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_tab_fill(&self, tab_fill: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab-fill\0".as_ptr() as *const _, Value::from(&tab_fill).to_glib_none().0);
        }
    }

    fn get_property_tab_label(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab-label\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_tab_label(&self, tab_label: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tab-label\0".as_ptr() as *const _, Value::from(tab_label).to_glib_none().0);
        }
    }

    fn connect_property_detachable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::detachable\0".as_ptr() as *const _,
                Some(transmute(notify_detachable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_menu_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::menu-label\0".as_ptr() as *const _,
                Some(transmute(notify_menu_label_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_position_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::position\0".as_ptr() as *const _,
                Some(transmute(notify_position_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_reorderable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::reorderable\0".as_ptr() as *const _,
                Some(transmute(notify_reorderable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_tab_expand_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tab-expand\0".as_ptr() as *const _,
                Some(transmute(notify_tab_expand_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_tab_fill_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tab-fill\0".as_ptr() as *const _,
                Some(transmute(notify_tab_fill_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_tab_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tab-label\0".as_ptr() as *const _,
                Some(transmute(notify_tab_label_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_detachable_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_menu_label_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_position_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_reorderable_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_tab_expand_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_tab_fill_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_tab_label_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkNotebookPage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<NotebookPage> {
    let f: &F = &*(f as *const F);
    f(&NotebookPage::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for NotebookPage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "NotebookPage")
    }
}
