// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EventController;
use ffi;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct EventControllerLegacy(Object<ffi::GtkEventControllerLegacy, ffi::GtkEventControllerLegacyClass, EventControllerLegacyClass>) @extends EventController;

    match fn {
        get_type => || ffi::gtk_event_controller_legacy_get_type(),
    }
}

impl EventControllerLegacy {
    pub fn new() -> EventControllerLegacy {
        assert_initialized_main_thread!();
        unsafe {
            EventController::from_glib_full(ffi::gtk_event_controller_legacy_new()).unsafe_cast()
        }
    }

    //pub fn connect_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored event: Gdk.Event
    //}
}

impl Default for EventControllerLegacy {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_EVENT_CONTROLLER_LEGACY: Option<&EventControllerLegacy> = None;

impl fmt::Display for EventControllerLegacy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EventControllerLegacy")
    }
}
