// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use AccelKey;
use gdk;
use gdk_sys;
use glib::GString;
use glib::object::ObjectType as ObjectType_;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use libc;
use std;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct AccelMap(Object<gtk_sys::GtkAccelMap, gtk_sys::GtkAccelMapClass, AccelMapClass>);

    match fn {
        get_type => || gtk_sys::gtk_accel_map_get_type(),
    }
}

impl AccelMap {
    pub fn add_entry(accel_path: &str, accel_key: u32, accel_mods: gdk::ModifierType) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_add_entry(accel_path.to_glib_none().0, accel_key, accel_mods.to_glib());
        }
    }

    pub fn add_filter(filter_pattern: &str) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_add_filter(filter_pattern.to_glib_none().0);
        }
    }

    pub fn change_entry(accel_path: &str, accel_key: u32, accel_mods: gdk::ModifierType, replace: bool) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(gtk_sys::gtk_accel_map_change_entry(accel_path.to_glib_none().0, accel_key, accel_mods.to_glib(), replace.to_glib()))
        }
    }

    pub fn get() -> Option<AccelMap> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(gtk_sys::gtk_accel_map_get())
        }
    }

    pub fn load<P: AsRef<std::path::Path>>(file_name: P) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_load(file_name.as_ref().to_glib_none().0);
        }
    }

    pub fn load_fd(fd: i32) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_load_fd(fd);
        }
    }

    //pub fn load_scanner(scanner: /*Ignored*/&mut glib::Scanner) {
    //    unsafe { TODO: call gtk_sys:gtk_accel_map_load_scanner() }
    //}

    pub fn lock_path(accel_path: &str) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_lock_path(accel_path.to_glib_none().0);
        }
    }

    pub fn lookup_entry(accel_path: &str) -> Option<AccelKey> {
        assert_initialized_main_thread!();
        unsafe {
            let mut key = AccelKey::uninitialized();
            let ret = from_glib(gtk_sys::gtk_accel_map_lookup_entry(accel_path.to_glib_none().0, key.to_glib_none_mut().0));
            if ret { Some(key) } else { None }
        }
    }

    pub fn save<P: AsRef<std::path::Path>>(file_name: P) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_save(file_name.as_ref().to_glib_none().0);
        }
    }

    pub fn save_fd(fd: i32) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_save_fd(fd);
        }
    }

    pub fn unlock_path(accel_path: &str) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_sys::gtk_accel_map_unlock_path(accel_path.to_glib_none().0);
        }
    }

    pub fn connect_changed<F: Fn(&AccelMap, &str, u32, gdk::ModifierType) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&AccelMap, &str, u32, gdk::ModifierType) + 'static>(this: *mut gtk_sys::GtkAccelMap, accel_path: *mut libc::c_char, accel_key: libc::c_uint, accel_mods: gdk_sys::GdkModifierType, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &GString::from_glib_borrow(accel_path), accel_key, from_glib(accel_mods))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute(changed_trampoline::<F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for AccelMap {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AccelMap")
    }
}
