// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::translate::*;
use gtk_sys;
use std::fmt;
use Expression;

glib_wrapper! {
    pub struct ClosureExpression(Object<gtk_sys::GtkClosureExpression, ClosureExpressionClass>) @extends Expression;

    match fn {
        get_type => || gtk_sys::gtk_closure_expression_get_type(),
    }
}

impl ClosureExpression {
    pub fn new(
        value_type: glib::types::Type,
        closure: &glib::Closure,
        params: &[Expression],
    ) -> ClosureExpression {
        assert_initialized_main_thread!();
        let n_params = params.len() as u32;
        unsafe {
            Expression::from_glib_full(gtk_sys::gtk_closure_expression_new(
                value_type.to_glib(),
                closure.to_glib_none().0,
                n_params,
                params.to_glib_full(),
            ))
            .unsafe_cast()
        }
    }
}

impl fmt::Display for ClosureExpression {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ClosureExpression")
    }
}
