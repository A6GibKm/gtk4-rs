// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use TreeModel;
use TreePath;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct TreeRowReference(Boxed<ffi::GtkTreeRowReference>);

    match fn {
        copy => |ptr| ffi::gtk_tree_row_reference_copy(mut_override(ptr)),
        free => |ptr| ffi::gtk_tree_row_reference_free(ptr),
        get_type => || ffi::gtk_tree_row_reference_get_type(),
    }
}

impl TreeRowReference {
    pub fn new<P: IsA<TreeModel>>(model: &P, path: &mut TreePath) -> TreeRowReference {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gtk_tree_row_reference_new(model.as_ref().to_glib_none().0, path.to_glib_none_mut().0))
        }
    }

    //pub fn new_proxy<P: IsA<TreeModel>>(proxy: /*Ignored*/&glib::Object, model: &P, path: &mut TreePath) -> TreeRowReference {
    //    unsafe { TODO: call ffi::gtk_tree_row_reference_new_proxy() }
    //}

    pub fn get_model(&mut self) -> Option<TreeModel> {
        unsafe {
            from_glib_none(ffi::gtk_tree_row_reference_get_model(self.to_glib_none_mut().0))
        }
    }

    pub fn get_path(&mut self) -> Option<TreePath> {
        unsafe {
            from_glib_full(ffi::gtk_tree_row_reference_get_path(self.to_glib_none_mut().0))
        }
    }

    pub fn valid(&mut self) -> bool {
        unsafe {
            from_glib(ffi::gtk_tree_row_reference_valid(self.to_glib_none_mut().0))
        }
    }

    //pub fn deleted(proxy: /*Ignored*/&glib::Object, path: &mut TreePath) {
    //    unsafe { TODO: call ffi::gtk_tree_row_reference_deleted() }
    //}

    //pub fn inserted(proxy: /*Ignored*/&glib::Object, path: &mut TreePath) {
    //    unsafe { TODO: call ffi::gtk_tree_row_reference_inserted() }
    //}

    //pub fn reordered(proxy: /*Ignored*/&glib::Object, path: &mut TreePath, iter: &mut TreeIter, new_order: &[i32]) {
    //    unsafe { TODO: call ffi::gtk_tree_row_reference_reordered() }
    //}
}
