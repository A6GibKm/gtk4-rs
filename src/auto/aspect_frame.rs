// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Accessible;
use Buildable;
use Widget;

glib_wrapper! {
    pub struct AspectFrame(Object<gtk_sys::GtkAspectFrame, AspectFrameClass>) @extends Widget, @implements Accessible, Buildable;

    match fn {
        get_type => || gtk_sys::gtk_aspect_frame_get_type(),
    }
}

impl AspectFrame {
    pub fn new(xalign: f32, yalign: f32, ratio: f32, obey_child: bool) -> AspectFrame {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_aspect_frame_new(
                xalign,
                yalign,
                ratio,
                obey_child.to_glib(),
            ))
            .unsafe_cast()
        }
    }

    pub fn get_child(&self) -> Option<Widget> {
        unsafe { from_glib_none(gtk_sys::gtk_aspect_frame_get_child(self.to_glib_none().0)) }
    }

    pub fn get_obey_child(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_aspect_frame_get_obey_child(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_ratio(&self) -> f32 {
        unsafe { gtk_sys::gtk_aspect_frame_get_ratio(self.to_glib_none().0) }
    }

    pub fn get_xalign(&self) -> f32 {
        unsafe { gtk_sys::gtk_aspect_frame_get_xalign(self.to_glib_none().0) }
    }

    pub fn get_yalign(&self) -> f32 {
        unsafe { gtk_sys::gtk_aspect_frame_get_yalign(self.to_glib_none().0) }
    }

    pub fn set_child<P: IsA<Widget>>(&self, child: Option<&P>) {
        unsafe {
            gtk_sys::gtk_aspect_frame_set_child(
                self.to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn set_obey_child(&self, obey_child: bool) {
        unsafe {
            gtk_sys::gtk_aspect_frame_set_obey_child(self.to_glib_none().0, obey_child.to_glib());
        }
    }

    pub fn set_ratio(&self, ratio: f32) {
        unsafe {
            gtk_sys::gtk_aspect_frame_set_ratio(self.to_glib_none().0, ratio);
        }
    }

    pub fn set_xalign(&self, xalign: f32) {
        unsafe {
            gtk_sys::gtk_aspect_frame_set_xalign(self.to_glib_none().0, xalign);
        }
    }

    pub fn set_yalign(&self, yalign: f32) {
        unsafe {
            gtk_sys::gtk_aspect_frame_set_yalign(self.to_glib_none().0, yalign);
        }
    }

    pub fn connect_property_child_notify<F: Fn(&AspectFrame) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_trampoline<F: Fn(&AspectFrame) + 'static>(
            this: *mut gtk_sys::GtkAspectFrame,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_obey_child_notify<F: Fn(&AspectFrame) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_obey_child_trampoline<F: Fn(&AspectFrame) + 'static>(
            this: *mut gtk_sys::GtkAspectFrame,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::obey-child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_obey_child_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_ratio_notify<F: Fn(&AspectFrame) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_ratio_trampoline<F: Fn(&AspectFrame) + 'static>(
            this: *mut gtk_sys::GtkAspectFrame,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ratio\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ratio_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_xalign_notify<F: Fn(&AspectFrame) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_xalign_trampoline<F: Fn(&AspectFrame) + 'static>(
            this: *mut gtk_sys::GtkAspectFrame,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::xalign\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_xalign_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_yalign_notify<F: Fn(&AspectFrame) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_yalign_trampoline<F: Fn(&AspectFrame) + 'static>(
            this: *mut gtk_sys::GtkAspectFrame,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::yalign\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_yalign_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AspectFrame {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AspectFrame")
    }
}
