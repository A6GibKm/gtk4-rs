// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct StyleProvider(Interface<gtk_sys::GtkStyleProvider>);

    match fn {
        get_type => || gtk_sys::gtk_style_provider_get_type(),
    }
}

pub const NONE_STYLE_PROVIDER: Option<&StyleProvider> = None;

pub trait StyleProviderExt: 'static {
    fn connect__gtk_private_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StyleProvider>> StyleProviderExt for O {
    fn connect__gtk_private_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"-gtk-private-changed\0".as_ptr() as *const _,
                Some(transmute(_gtk_private_changed_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn _gtk_private_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStyleProvider, f: glib_sys::gpointer)
where P: IsA<StyleProvider> {
    let f: &F = &*(f as *const F);
    f(&StyleProvider::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for StyleProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StyleProvider")
    }
}
