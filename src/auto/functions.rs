// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use BlendMode;
use RenderNode;
use ffi;
use glib::GString;
use glib::translate::*;


pub fn blend_node_get_blend_mode(node: &RenderNode) -> BlendMode {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(ffi::gsk_blend_node_get_blend_mode(node.to_glib_none().0))
    }
}

pub fn blend_node_get_bottom_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_blend_node_get_bottom_child(node.to_glib_none().0))
    }
}

pub fn blend_node_get_top_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_blend_node_get_top_child(node.to_glib_none().0))
    }
}

pub fn blend_node_new(bottom: &RenderNode, top: &RenderNode, blend_mode: BlendMode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_blend_node_new(bottom.to_glib_none().0, top.to_glib_none().0, blend_mode.to_glib()))
    }
}

pub fn blur_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_blur_node_get_child(node.to_glib_none().0))
    }
}

pub fn blur_node_get_radius(node: &RenderNode) -> f64 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_blur_node_get_radius(node.to_glib_none().0)
    }
}

pub fn blur_node_new(child: &RenderNode, radius: f64) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_blur_node_new(child.to_glib_none().0, radius))
    }
}

//pub fn border_node_new(outline: /*Ignored*/&RoundedRect, border_width: /*Unimplemented*/FixedArray TypeId { ns_id: 0, id: 20 }; 4, border_color: /*Unimplemented*/FixedArray TypeId { ns_id: 9, id: 94 }; 4) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_border_node_new() }
//}

//pub fn border_node_peek_colors(node: &RenderNode) -> /*Ignored*/Option<gdk::RGBA> {
//    unsafe { TODO: call ffi::gsk_border_node_peek_colors() }
//}

//pub fn border_node_peek_outline(node: &RenderNode) -> /*Ignored*/Option<RoundedRect> {
//    unsafe { TODO: call ffi::gsk_border_node_peek_outline() }
//}

//pub fn cairo_node_get_draw_context(node: &RenderNode) -> /*Ignored*/Option<cairo::Context> {
//    unsafe { TODO: call ffi::gsk_cairo_node_get_draw_context() }
//}

//pub fn cairo_node_new(bounds: /*Ignored*/&graphene::Rect) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_cairo_node_new() }
//}

//pub fn cairo_node_peek_surface(node: &RenderNode) -> /*Ignored*/Option<cairo::Surface> {
//    unsafe { TODO: call ffi::gsk_cairo_node_peek_surface() }
//}

pub fn clip_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_none(ffi::gsk_clip_node_get_child(node.to_glib_none().0))
    }
}

//pub fn clip_node_new(child: &RenderNode, clip: /*Ignored*/&graphene::Rect) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_clip_node_new() }
//}

//pub fn clip_node_peek_clip(node: &RenderNode) -> /*Ignored*/Option<graphene::Rect> {
//    unsafe { TODO: call ffi::gsk_clip_node_peek_clip() }
//}

pub fn color_matrix_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_none(ffi::gsk_color_matrix_node_get_child(node.to_glib_none().0))
    }
}

//pub fn color_matrix_node_new(child: &RenderNode, color_matrix: /*Ignored*/&graphene::Matrix, color_offset: /*Ignored*/&graphene::Vec4) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_color_matrix_node_new() }
//}

//pub fn color_matrix_node_peek_color_matrix(node: &RenderNode) -> /*Ignored*/Option<graphene::Matrix> {
//    unsafe { TODO: call ffi::gsk_color_matrix_node_peek_color_matrix() }
//}

//pub fn color_matrix_node_peek_color_offset(node: &RenderNode) -> /*Ignored*/Option<graphene::Vec4> {
//    unsafe { TODO: call ffi::gsk_color_matrix_node_peek_color_offset() }
//}

//pub fn color_node_new(rgba: /*Ignored*/&gdk::RGBA, bounds: /*Ignored*/&graphene::Rect) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_color_node_new() }
//}

//pub fn color_node_peek_color(node: &RenderNode) -> /*Ignored*/Option<gdk::RGBA> {
//    unsafe { TODO: call ffi::gsk_color_node_peek_color() }
//}

pub fn container_node_get_child(node: &RenderNode, idx: u32) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_container_node_get_child(node.to_glib_none().0, idx))
    }
}

pub fn container_node_get_n_children(node: &RenderNode) -> u32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_container_node_get_n_children(node.to_glib_none().0)
    }
}

pub fn cross_fade_node_get_end_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_cross_fade_node_get_end_child(node.to_glib_none().0))
    }
}

pub fn cross_fade_node_get_progress(node: &RenderNode) -> f64 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_cross_fade_node_get_progress(node.to_glib_none().0)
    }
}

pub fn cross_fade_node_get_start_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_cross_fade_node_get_start_child(node.to_glib_none().0))
    }
}

pub fn cross_fade_node_new(start: &RenderNode, end: &RenderNode, progress: f64) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_cross_fade_node_new(start.to_glib_none().0, end.to_glib_none().0, progress))
    }
}

pub fn debug_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_none(ffi::gsk_debug_node_get_child(node.to_glib_none().0))
    }
}

pub fn debug_node_get_message(node: &RenderNode) -> Option<GString> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_none(ffi::gsk_debug_node_get_message(node.to_glib_none().0))
    }
}

pub fn debug_node_new(child: &RenderNode, message: &str) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_debug_node_new(child.to_glib_none().0, message.to_glib_full()))
    }
}

pub fn inset_shadow_node_get_blur_radius(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_inset_shadow_node_get_blur_radius(node.to_glib_none().0)
    }
}

pub fn inset_shadow_node_get_dx(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_inset_shadow_node_get_dx(node.to_glib_none().0)
    }
}

pub fn inset_shadow_node_get_dy(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_inset_shadow_node_get_dy(node.to_glib_none().0)
    }
}

pub fn inset_shadow_node_get_spread(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_inset_shadow_node_get_spread(node.to_glib_none().0)
    }
}

//pub fn inset_shadow_node_new(outline: /*Ignored*/&RoundedRect, color: /*Ignored*/&gdk::RGBA, dx: f32, dy: f32, spread: f32, blur_radius: f32) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_inset_shadow_node_new() }
//}

//pub fn inset_shadow_node_peek_color(node: &RenderNode) -> /*Ignored*/Option<gdk::RGBA> {
//    unsafe { TODO: call ffi::gsk_inset_shadow_node_peek_color() }
//}

//pub fn inset_shadow_node_peek_outline(node: &RenderNode) -> /*Ignored*/Option<RoundedRect> {
//    unsafe { TODO: call ffi::gsk_inset_shadow_node_peek_outline() }
//}

pub fn linear_gradient_node_get_n_color_stops(node: &RenderNode) -> usize {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_linear_gradient_node_get_n_color_stops(node.to_glib_none().0)
    }
}

//pub fn linear_gradient_node_new(bounds: /*Ignored*/&graphene::Rect, start: /*Ignored*/&graphene::Point, end: /*Ignored*/&graphene::Point, color_stops: /*Ignored*/&[&ColorStop]) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_linear_gradient_node_new() }
//}

//pub fn linear_gradient_node_peek_color_stops(node: &RenderNode) -> /*Ignored*/Option<ColorStop> {
//    unsafe { TODO: call ffi::gsk_linear_gradient_node_peek_color_stops() }
//}

//pub fn linear_gradient_node_peek_end(node: &RenderNode) -> /*Ignored*/Option<graphene::Point> {
//    unsafe { TODO: call ffi::gsk_linear_gradient_node_peek_end() }
//}

//pub fn linear_gradient_node_peek_start(node: &RenderNode) -> /*Ignored*/Option<graphene::Point> {
//    unsafe { TODO: call ffi::gsk_linear_gradient_node_peek_start() }
//}

pub fn opacity_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_none(ffi::gsk_opacity_node_get_child(node.to_glib_none().0))
    }
}

pub fn opacity_node_get_opacity(node: &RenderNode) -> f64 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_opacity_node_get_opacity(node.to_glib_none().0)
    }
}

pub fn opacity_node_new(child: &RenderNode, opacity: f64) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_opacity_node_new(child.to_glib_none().0, opacity))
    }
}

pub fn outset_shadow_node_get_blur_radius(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_outset_shadow_node_get_blur_radius(node.to_glib_none().0)
    }
}

pub fn outset_shadow_node_get_dx(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_outset_shadow_node_get_dx(node.to_glib_none().0)
    }
}

pub fn outset_shadow_node_get_dy(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_outset_shadow_node_get_dy(node.to_glib_none().0)
    }
}

pub fn outset_shadow_node_get_spread(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_outset_shadow_node_get_spread(node.to_glib_none().0)
    }
}

//pub fn outset_shadow_node_new(outline: /*Ignored*/&RoundedRect, color: /*Ignored*/&gdk::RGBA, dx: f32, dy: f32, spread: f32, blur_radius: f32) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_outset_shadow_node_new() }
//}

//pub fn outset_shadow_node_peek_color(node: &RenderNode) -> /*Ignored*/Option<gdk::RGBA> {
//    unsafe { TODO: call ffi::gsk_outset_shadow_node_peek_color() }
//}

//pub fn outset_shadow_node_peek_outline(node: &RenderNode) -> /*Ignored*/Option<RoundedRect> {
//    unsafe { TODO: call ffi::gsk_outset_shadow_node_peek_outline() }
//}

pub fn repeat_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_full(ffi::gsk_repeat_node_get_child(node.to_glib_none().0))
    }
}

//pub fn repeat_node_new(bounds: /*Ignored*/&graphene::Rect, child: &RenderNode, child_bounds: /*Ignored*/Option<&graphene::Rect>) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_repeat_node_new() }
//}

//pub fn repeat_node_peek_child_bounds(node: &RenderNode) -> /*Ignored*/Option<graphene::Rect> {
//    unsafe { TODO: call ffi::gsk_repeat_node_peek_child_bounds() }
//}

//pub fn repeating_linear_gradient_node_new(bounds: /*Ignored*/&graphene::Rect, start: /*Ignored*/&graphene::Point, end: /*Ignored*/&graphene::Point, color_stops: /*Ignored*/&[&ColorStop]) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_repeating_linear_gradient_node_new() }
//}

pub fn rounded_clip_node_get_child(node: &RenderNode) -> Option<RenderNode> {
    assert_initialized_main_thread!();
    unsafe {
        from_glib_none(ffi::gsk_rounded_clip_node_get_child(node.to_glib_none().0))
    }
}

//pub fn rounded_clip_node_new(child: &RenderNode, clip: /*Ignored*/&RoundedRect) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_rounded_clip_node_new() }
//}

//pub fn rounded_clip_node_peek_clip(node: &RenderNode) -> /*Ignored*/Option<RoundedRect> {
//    unsafe { TODO: call ffi::gsk_rounded_clip_node_peek_clip() }
//}

pub fn text_node_get_num_glyphs(node: &RenderNode) -> u32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_text_node_get_num_glyphs(node.to_glib_none().0)
    }
}

pub fn text_node_get_x(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_text_node_get_x(node.to_glib_none().0)
    }
}

pub fn text_node_get_y(node: &RenderNode) -> f32 {
    assert_initialized_main_thread!();
    unsafe {
        ffi::gsk_text_node_get_y(node.to_glib_none().0)
    }
}

//pub fn text_node_new(font: /*Ignored*/&pango::Font, glyphs: /*Ignored*/&mut pango::GlyphString, color: /*Ignored*/&gdk::RGBA, x: f32, y: f32) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_text_node_new() }
//}

//pub fn text_node_peek_color(node: &RenderNode) -> /*Ignored*/Option<gdk::RGBA> {
//    unsafe { TODO: call ffi::gsk_text_node_peek_color() }
//}

//pub fn text_node_peek_font(node: &RenderNode) -> /*Ignored*/Option<pango::Font> {
//    unsafe { TODO: call ffi::gsk_text_node_peek_font() }
//}

//pub fn text_node_peek_glyphs(node: &RenderNode) -> /*Ignored*/Option<pango::GlyphInfo> {
//    unsafe { TODO: call ffi::gsk_text_node_peek_glyphs() }
//}

//pub fn texture_node_get_texture(node: &RenderNode) -> /*Ignored*/Option<gdk::Texture> {
//    unsafe { TODO: call ffi::gsk_texture_node_get_texture() }
//}

//pub fn texture_node_new(texture: /*Ignored*/&gdk::Texture, bounds: /*Ignored*/&graphene::Rect) -> Option<RenderNode> {
//    unsafe { TODO: call ffi::gsk_texture_node_new() }
//}
