// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use graphene;
use gsk_sys;
use std::fmt;
use RenderNode;

glib_wrapper! {
    pub struct LinearGradientNode(Object<gsk_sys::GskLinearGradientNode, LinearGradientNodeClass>) @extends RenderNode;

    match fn {
        get_type => || gsk_sys::gsk_linear_gradient_node_get_type(),
    }
}

impl LinearGradientNode {
    //pub fn new(bounds: &graphene::Rect, start: &graphene::Point, end: &graphene::Point, color_stops: /*Ignored*/&[&ColorStop]) -> LinearGradientNode {
    //    unsafe { TODO: call gsk_sys:gsk_linear_gradient_node_new() }
    //}

    pub fn get_n_color_stops(&self) -> usize {
        unsafe { gsk_sys::gsk_linear_gradient_node_get_n_color_stops(self.to_glib_none().0) }
    }

    //pub fn peek_color_stops(&self) -> /*Ignored*/Vec<ColorStop> {
    //    unsafe { TODO: call gsk_sys:gsk_linear_gradient_node_peek_color_stops() }
    //}

    pub fn peek_end(&self) -> Option<graphene::Point> {
        unsafe {
            from_glib_none(gsk_sys::gsk_linear_gradient_node_peek_end(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn peek_start(&self) -> Option<graphene::Point> {
        unsafe {
            from_glib_none(gsk_sys::gsk_linear_gradient_node_peek_start(
                self.to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for LinearGradientNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "LinearGradientNode")
    }
}
