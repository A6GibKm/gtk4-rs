// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EventController;
use IMContext;
use Widget;
use ffi;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct EventControllerKey(Object<ffi::GtkEventControllerKey, ffi::GtkEventControllerKeyClass, EventControllerKeyClass>) @extends EventController;

    match fn {
        get_type => || ffi::gtk_event_controller_key_get_type(),
    }
}

impl EventControllerKey {
    pub fn new() -> EventControllerKey {
        assert_initialized_main_thread!();
        unsafe {
            EventController::from_glib_full(ffi::gtk_event_controller_key_new()).unsafe_cast()
        }
    }
}

impl Default for EventControllerKey {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_EVENT_CONTROLLER_KEY: Option<&EventControllerKey> = None;

pub trait EventControllerKeyExt: 'static {
    fn forward<P: IsA<Widget>>(&self, widget: &P) -> bool;

    fn get_focus_origin(&self) -> Option<Widget>;

    fn get_focus_target(&self) -> Option<Widget>;

    fn get_group(&self) -> u32;

    fn get_im_context(&self) -> Option<IMContext>;

    fn set_im_context<P: IsA<IMContext>>(&self, im_context: &P);

    fn get_property_contains_focus(&self) -> bool;

    fn get_property_is_focus(&self) -> bool;

    //fn connect_focus_in<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_focus_out<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_im_update<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //fn connect_key_pressed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_key_released<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_modifiers<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_property_contains_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<EventControllerKey>> EventControllerKeyExt for O {
    fn forward<P: IsA<Widget>>(&self, widget: &P) -> bool {
        unsafe {
            from_glib(ffi::gtk_event_controller_key_forward(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0))
        }
    }

    fn get_focus_origin(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_event_controller_key_get_focus_origin(self.as_ref().to_glib_none().0))
        }
    }

    fn get_focus_target(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_event_controller_key_get_focus_target(self.as_ref().to_glib_none().0))
        }
    }

    fn get_group(&self) -> u32 {
        unsafe {
            ffi::gtk_event_controller_key_get_group(self.as_ref().to_glib_none().0)
        }
    }

    fn get_im_context(&self) -> Option<IMContext> {
        unsafe {
            from_glib_none(ffi::gtk_event_controller_key_get_im_context(self.as_ref().to_glib_none().0))
        }
    }

    fn set_im_context<P: IsA<IMContext>>(&self, im_context: &P) {
        unsafe {
            ffi::gtk_event_controller_key_set_im_context(self.as_ref().to_glib_none().0, im_context.as_ref().to_glib_none().0);
        }
    }

    fn get_property_contains_focus(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"contains-focus\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_is_focus(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"is-focus\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    //fn connect_focus_in<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored mode: Gdk.CrossingMode
    //    Ignored detail: Gdk.NotifyType
    //}

    //fn connect_focus_out<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored mode: Gdk.CrossingMode
    //    Ignored detail: Gdk.NotifyType
    //}

    fn connect_im_update<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"im-update\0".as_ptr() as *const _,
                Some(transmute(im_update_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    //fn connect_key_pressed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored state: Gdk.ModifierType
    //}

    //fn connect_key_released<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored state: Gdk.ModifierType
    //}

    //fn connect_modifiers<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored keyval: Gdk.ModifierType
    //}

    fn connect_property_contains_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::contains-focus\0".as_ptr() as *const _,
                Some(transmute(notify_contains_focus_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_is_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-focus\0".as_ptr() as *const _,
                Some(transmute(notify_is_focus_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn im_update_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkEventControllerKey, f: glib_ffi::gpointer)
where P: IsA<EventControllerKey> {
    let f: &F = &*(f as *const F);
    f(&EventControllerKey::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_contains_focus_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkEventControllerKey, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<EventControllerKey> {
    let f: &F = &*(f as *const F);
    f(&EventControllerKey::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_is_focus_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkEventControllerKey, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<EventControllerKey> {
    let f: &F = &*(f as *const F);
    f(&EventControllerKey::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for EventControllerKey {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EventControllerKey")
    }
}
