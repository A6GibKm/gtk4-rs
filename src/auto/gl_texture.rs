// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Paintable;
use Texture;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct GLTexture(Object<ffi::GdkGLTexture, ffi::GdkGLTextureClass, GLTextureClass>) @extends Texture, @implements Paintable;

    match fn {
        get_type => || ffi::gdk_gl_texture_get_type(),
    }
}

impl GLTexture {
    //pub fn new(context: &GLContext, id: u32, width: i32, height: i32, data: /*Unimplemented*/Option<Fundamental: Pointer>) -> GLTexture {
    //    unsafe { TODO: call ffi::gdk_gl_texture_new() }
    //}
}

pub const NONE_GL_TEXTURE: Option<&GLTexture> = None;

pub trait GLTextureExt: 'static {
    fn release(&self);
}

impl<O: IsA<GLTexture>> GLTextureExt for O {
    fn release(&self) {
        unsafe {
            ffi::gdk_gl_texture_release(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for GLTexture {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GLTexture")
    }
}
