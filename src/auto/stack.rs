// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Buildable;
use Container;
use SelectionModel;
use StackPage;
use StackTransitionType;
use Widget;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Stack(Object<gtk_sys::GtkStack, gtk_sys::GtkStackClass, StackClass>) @extends Container, Widget, @implements Buildable;

    match fn {
        get_type => || gtk_sys::gtk_stack_get_type(),
    }
}

impl Stack {
    pub fn new() -> Stack {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(gtk_sys::gtk_stack_new()).unsafe_cast()
        }
    }
}

impl Default for Stack {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_STACK: Option<&Stack> = None;

pub trait StackExt: 'static {
    fn add_named<P: IsA<Widget>>(&self, child: &P, name: &str);

    fn add_titled<P: IsA<Widget>>(&self, child: &P, name: &str, title: &str);

    fn get_child_by_name(&self, name: &str) -> Option<Widget>;

    fn get_hhomogeneous(&self) -> bool;

    fn get_homogeneous(&self) -> bool;

    fn get_interpolate_size(&self) -> bool;

    fn get_page<P: IsA<Widget>>(&self, child: &P) -> Option<StackPage>;

    fn get_pages(&self) -> Option<SelectionModel>;

    fn get_transition_duration(&self) -> u32;

    fn get_transition_running(&self) -> bool;

    fn get_transition_type(&self) -> StackTransitionType;

    fn get_vhomogeneous(&self) -> bool;

    fn get_visible_child(&self) -> Option<Widget>;

    fn get_visible_child_name(&self) -> Option<GString>;

    fn set_hhomogeneous(&self, hhomogeneous: bool);

    fn set_homogeneous(&self, homogeneous: bool);

    fn set_interpolate_size(&self, interpolate_size: bool);

    fn set_transition_duration(&self, duration: u32);

    fn set_transition_type(&self, transition: StackTransitionType);

    fn set_vhomogeneous(&self, vhomogeneous: bool);

    fn set_visible_child<P: IsA<Widget>>(&self, child: &P);

    fn set_visible_child_full(&self, name: &str, transition: StackTransitionType);

    fn set_visible_child_name(&self, name: &str);

    fn connect_property_hhomogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_homogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pages_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vhomogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_child_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Stack>> StackExt for O {
    fn add_named<P: IsA<Widget>>(&self, child: &P, name: &str) {
        unsafe {
            gtk_sys::gtk_stack_add_named(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn add_titled<P: IsA<Widget>>(&self, child: &P, name: &str, title: &str) {
        unsafe {
            gtk_sys::gtk_stack_add_titled(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0, name.to_glib_none().0, title.to_glib_none().0);
        }
    }

    fn get_child_by_name(&self, name: &str) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_stack_get_child_by_name(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_hhomogeneous(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_stack_get_hhomogeneous(self.as_ref().to_glib_none().0))
        }
    }

    fn get_homogeneous(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_stack_get_homogeneous(self.as_ref().to_glib_none().0))
        }
    }

    fn get_interpolate_size(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_stack_get_interpolate_size(self.as_ref().to_glib_none().0))
        }
    }

    fn get_page<P: IsA<Widget>>(&self, child: &P) -> Option<StackPage> {
        unsafe {
            from_glib_none(gtk_sys::gtk_stack_get_page(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0))
        }
    }

    fn get_pages(&self) -> Option<SelectionModel> {
        unsafe {
            from_glib_full(gtk_sys::gtk_stack_get_pages(self.as_ref().to_glib_none().0))
        }
    }

    fn get_transition_duration(&self) -> u32 {
        unsafe {
            gtk_sys::gtk_stack_get_transition_duration(self.as_ref().to_glib_none().0)
        }
    }

    fn get_transition_running(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_stack_get_transition_running(self.as_ref().to_glib_none().0))
        }
    }

    fn get_transition_type(&self) -> StackTransitionType {
        unsafe {
            from_glib(gtk_sys::gtk_stack_get_transition_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_vhomogeneous(&self) -> bool {
        unsafe {
            from_glib(gtk_sys::gtk_stack_get_vhomogeneous(self.as_ref().to_glib_none().0))
        }
    }

    fn get_visible_child(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_stack_get_visible_child(self.as_ref().to_glib_none().0))
        }
    }

    fn get_visible_child_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_sys::gtk_stack_get_visible_child_name(self.as_ref().to_glib_none().0))
        }
    }

    fn set_hhomogeneous(&self, hhomogeneous: bool) {
        unsafe {
            gtk_sys::gtk_stack_set_hhomogeneous(self.as_ref().to_glib_none().0, hhomogeneous.to_glib());
        }
    }

    fn set_homogeneous(&self, homogeneous: bool) {
        unsafe {
            gtk_sys::gtk_stack_set_homogeneous(self.as_ref().to_glib_none().0, homogeneous.to_glib());
        }
    }

    fn set_interpolate_size(&self, interpolate_size: bool) {
        unsafe {
            gtk_sys::gtk_stack_set_interpolate_size(self.as_ref().to_glib_none().0, interpolate_size.to_glib());
        }
    }

    fn set_transition_duration(&self, duration: u32) {
        unsafe {
            gtk_sys::gtk_stack_set_transition_duration(self.as_ref().to_glib_none().0, duration);
        }
    }

    fn set_transition_type(&self, transition: StackTransitionType) {
        unsafe {
            gtk_sys::gtk_stack_set_transition_type(self.as_ref().to_glib_none().0, transition.to_glib());
        }
    }

    fn set_vhomogeneous(&self, vhomogeneous: bool) {
        unsafe {
            gtk_sys::gtk_stack_set_vhomogeneous(self.as_ref().to_glib_none().0, vhomogeneous.to_glib());
        }
    }

    fn set_visible_child<P: IsA<Widget>>(&self, child: &P) {
        unsafe {
            gtk_sys::gtk_stack_set_visible_child(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    fn set_visible_child_full(&self, name: &str, transition: StackTransitionType) {
        unsafe {
            gtk_sys::gtk_stack_set_visible_child_full(self.as_ref().to_glib_none().0, name.to_glib_none().0, transition.to_glib());
        }
    }

    fn set_visible_child_name(&self, name: &str) {
        unsafe {
            gtk_sys::gtk_stack_set_visible_child_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn connect_property_hhomogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hhomogeneous\0".as_ptr() as *const _,
                Some(transmute(notify_hhomogeneous_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_homogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::homogeneous\0".as_ptr() as *const _,
                Some(transmute(notify_homogeneous_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::interpolate-size\0".as_ptr() as *const _,
                Some(transmute(notify_interpolate_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_pages_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pages\0".as_ptr() as *const _,
                Some(transmute(notify_pages_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transition-duration\0".as_ptr() as *const _,
                Some(transmute(notify_transition_duration_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transition-running\0".as_ptr() as *const _,
                Some(transmute(notify_transition_running_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transition-type\0".as_ptr() as *const _,
                Some(transmute(notify_transition_type_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_vhomogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vhomogeneous\0".as_ptr() as *const _,
                Some(transmute(notify_vhomogeneous_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible-child\0".as_ptr() as *const _,
                Some(transmute(notify_visible_child_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_child_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible-child-name\0".as_ptr() as *const _,
                Some(transmute(notify_visible_child_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_hhomogeneous_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_homogeneous_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_interpolate_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_pages_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_transition_duration_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_transition_running_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_transition_type_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_vhomogeneous_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_visible_child_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_visible_child_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkStack, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<Stack> {
    let f: &F = &*(f as *const F);
    f(&Stack::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for Stack {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Stack")
    }
}
