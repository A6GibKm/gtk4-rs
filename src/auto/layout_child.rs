// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use LayoutManager;
use Widget;
use glib::object::IsA;
use glib::translate::*;
use gtk_sys;
use std::fmt;

glib_wrapper! {
    pub struct LayoutChild(Object<gtk_sys::GtkLayoutChild, gtk_sys::GtkLayoutChildClass, LayoutChildClass>);

    match fn {
        get_type => || gtk_sys::gtk_layout_child_get_type(),
    }
}

pub const NONE_LAYOUT_CHILD: Option<&LayoutChild> = None;

pub trait LayoutChildExt: 'static {
    fn get_child_widget(&self) -> Option<Widget>;

    fn get_layout_manager(&self) -> Option<LayoutManager>;
}

impl<O: IsA<LayoutChild>> LayoutChildExt for O {
    fn get_child_widget(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(gtk_sys::gtk_layout_child_get_child_widget(self.as_ref().to_glib_none().0))
        }
    }

    fn get_layout_manager(&self) -> Option<LayoutManager> {
        unsafe {
            from_glib_none(gtk_sys::gtk_layout_child_get_layout_manager(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for LayoutChild {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "LayoutChild")
    }
}
