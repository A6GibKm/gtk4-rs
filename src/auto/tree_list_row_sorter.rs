// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct TreeListRowSorter(Object<gtk_sys::GtkTreeListRowSorter, gtk_sys::GtkTreeListRowSorterClass, TreeListRowSorterClass>);

    match fn {
        get_type => || gtk_sys::gtk_tree_list_row_sorter_get_type(),
    }
}

impl TreeListRowSorter {
    //pub fn new(sorter: /*Ignored*/Option<&Sorter>) -> TreeListRowSorter {
    //    unsafe { TODO: call gtk_sys:gtk_tree_list_row_sorter_new() }
    //}
}

pub const NONE_TREE_LIST_ROW_SORTER: Option<&TreeListRowSorter> = None;

pub trait TreeListRowSorterExt: 'static {
    //fn get_sorter(&self) -> /*Ignored*/Option<Sorter>;

    //fn set_sorter(&self, sorter: /*Ignored*/Option<&Sorter>);

    fn connect_property_sorter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<TreeListRowSorter>> TreeListRowSorterExt for O {
    //fn get_sorter(&self) -> /*Ignored*/Option<Sorter> {
    //    unsafe { TODO: call gtk_sys:gtk_tree_list_row_sorter_get_sorter() }
    //}

    //fn set_sorter(&self, sorter: /*Ignored*/Option<&Sorter>) {
    //    unsafe { TODO: call gtk_sys:gtk_tree_list_row_sorter_set_sorter() }
    //}

    fn connect_property_sorter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sorter_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_sys::GtkTreeListRowSorter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<TreeListRowSorter>,
        {
            let f: &F = &*(f as *const F);
            f(&TreeListRowSorter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sorter\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sorter_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for TreeListRowSorter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TreeListRowSorter")
    }
}
